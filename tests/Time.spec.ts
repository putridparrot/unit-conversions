// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

import * as fc from 'fast-check';
import { Time } from '../src/Time';

it('From Centuries to Seconds and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Centuries.toSeconds(value)
            const convertBack = Time.Seconds.toCenturies(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Centuries to Minutes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Centuries.toMinutes(value)
            const convertBack = Time.Minutes.toCenturies(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Centuries to Hours and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Centuries.toHours(value)
            const convertBack = Time.Hours.toCenturies(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Centuries to Days and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Centuries.toDays(value)
            const convertBack = Time.Days.toCenturies(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Centuries to Weeks and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Centuries.toWeeks(value)
            const convertBack = Time.Weeks.toCenturies(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Centuries to Months and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Centuries.toMonths(value)
            const convertBack = Time.Months.toCenturies(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Centuries to Years and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Centuries.toYears(value)
            const convertBack = Time.Years.toCenturies(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Centuries to Decades and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Centuries.toDecades(value)
            const convertBack = Time.Decades.toCenturies(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Days to Seconds and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Days.toSeconds(value)
            const convertBack = Time.Seconds.toDays(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Days to Seconds', () => {
    expect(Time.Days.toSeconds(1.4)).toBeCloseTo(120960.0, 1);
    expect(Time.Days.toSeconds(0.06)).toBeCloseTo(5184.0, 1);
    expect(Time.Days.toSeconds(0.2)).toBeCloseTo(17280.0, 1);
});

it('From Days to Minutes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Days.toMinutes(value)
            const convertBack = Time.Minutes.toDays(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Days to Minutes', () => {
    expect(Time.Days.toMinutes(34.0)).toBeCloseTo(48960.0, 1);
    expect(Time.Days.toMinutes(0.06)).toBeCloseTo(86.4, 1);
    expect(Time.Days.toMinutes(8.1)).toBeCloseTo(11664.0, 1);
});

it('From Days to Hours and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Days.toHours(value)
            const convertBack = Time.Hours.toDays(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Days to Hours', () => {
    expect(Time.Days.toHours(8.1)).toBeCloseTo(194.4, 1);
    expect(Time.Days.toHours(0.2)).toBeCloseTo(4.8, 1);
    expect(Time.Days.toHours(121.0)).toBeCloseTo(2904.0, 1);
});

it('From Days to Weeks and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Days.toWeeks(value)
            const convertBack = Time.Weeks.toDays(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Days to Weeks', () => {
    expect(Time.Days.toWeeks(121.0)).toBeCloseTo(17.2857, 1);
    expect(Time.Days.toWeeks(7.2)).toBeCloseTo(1.02857, 1);
    expect(Time.Days.toWeeks(0.9)).toBeCloseTo(0.128571, 1);
});

it('From Days to Months and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Days.toMonths(value)
            const convertBack = Time.Months.toDays(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Days to Months', () => {
    expect(Time.Days.toMonths(0.9)).toBeCloseTo(0.029589, 1);
    expect(Time.Days.toMonths(108.0)).toBeCloseTo(3.55068, 1);
    expect(Time.Days.toMonths(55.0)).toBeCloseTo(1.80822, 1);
});

it('From Days to Years and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Days.toYears(value)
            const convertBack = Time.Years.toDays(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Days to Years', () => {
    expect(Time.Days.toYears(55.0)).toBeCloseTo(0.150685, 1);
    expect(Time.Days.toYears(123.0)).toBeCloseTo(0.336986, 1);
    expect(Time.Days.toYears(900.0)).toBeCloseTo(2.46575, 1);
});

it('From Days to Decades and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Days.toDecades(value)
            const convertBack = Time.Decades.toDays(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Days to Centuries and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Days.toCenturies(value)
            const convertBack = Time.Centuries.toDays(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Decades to Seconds and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Decades.toSeconds(value)
            const convertBack = Time.Seconds.toDecades(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Decades to Minutes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Decades.toMinutes(value)
            const convertBack = Time.Minutes.toDecades(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Decades to Hours and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Decades.toHours(value)
            const convertBack = Time.Hours.toDecades(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Decades to Days and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Decades.toDays(value)
            const convertBack = Time.Days.toDecades(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Decades to Weeks and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Decades.toWeeks(value)
            const convertBack = Time.Weeks.toDecades(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Decades to Months and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Decades.toMonths(value)
            const convertBack = Time.Months.toDecades(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Decades to Years and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Decades.toYears(value)
            const convertBack = Time.Years.toDecades(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Decades to Centuries and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Decades.toCenturies(value)
            const convertBack = Time.Centuries.toDecades(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Hours to Seconds and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Hours.toSeconds(value)
            const convertBack = Time.Seconds.toHours(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Hours to Seconds', () => {
    expect(Time.Hours.toSeconds(12.0)).toBeCloseTo(43200.0, 1);
    expect(Time.Hours.toSeconds(3.2)).toBeCloseTo(11520.0, 1);
    expect(Time.Hours.toSeconds(0.3)).toBeCloseTo(1080.0, 1);
});

it('From Hours to Minutes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Hours.toMinutes(value)
            const convertBack = Time.Minutes.toHours(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Hours to Minutes', () => {
    expect(Time.Hours.toMinutes(0.3)).toBeCloseTo(18.0, 1);
    expect(Time.Hours.toMinutes(700.0)).toBeCloseTo(42000.0, 1);
    expect(Time.Hours.toMinutes(4.8)).toBeCloseTo(288.0, 1);
});

it('From Hours to Days and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Hours.toDays(value)
            const convertBack = Time.Days.toHours(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Hours to Days', () => {
    expect(Time.Hours.toDays(4.8)).toBeCloseTo(0.2, 1);
    expect(Time.Hours.toDays(190.0)).toBeCloseTo(7.91667, 1);
    expect(Time.Hours.toDays(8.5)).toBeCloseTo(0.354167, 1);
});

it('From Hours to Weeks and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Hours.toWeeks(value)
            const convertBack = Time.Weeks.toHours(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Hours to Weeks', () => {
    expect(Time.Hours.toWeeks(800.0)).toBeCloseTo(4.7619, 1);
    expect(Time.Hours.toWeeks(90.0)).toBeCloseTo(0.535714, 1);
    expect(Time.Hours.toWeeks(102.0)).toBeCloseTo(0.607143, 1);
});

it('From Hours to Months and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Hours.toMonths(value)
            const convertBack = Time.Months.toHours(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Hours to Months', () => {
    expect(Time.Hours.toMonths(102.0)).toBeCloseTo(0.139726, 1);
    expect(Time.Hours.toMonths(9876.0)).toBeCloseTo(13.52875, 1);
    expect(Time.Hours.toMonths(100.8)).toBeCloseTo(0.13808204, 1);
});

it('From Hours to Years and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Hours.toYears(value)
            const convertBack = Time.Years.toHours(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Hours to Years', () => {
    expect(Time.Hours.toYears(9000.0)).toBeCloseTo(1.027397, 1);
    expect(Time.Hours.toYears(1003.0)).toBeCloseTo(0.1144977, 1);
    expect(Time.Hours.toYears(809.0)).toBeCloseTo(0.0923516, 1);
});

it('From Hours to Decades and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Hours.toDecades(value)
            const convertBack = Time.Decades.toHours(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Hours to Centuries and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Hours.toCenturies(value)
            const convertBack = Time.Centuries.toHours(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Minutes to Seconds and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Minutes.toSeconds(value)
            const convertBack = Time.Seconds.toMinutes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Minutes to Seconds', () => {
    expect(Time.Minutes.toSeconds(90.0)).toBeCloseTo(5400.0, 1);
    expect(Time.Minutes.toSeconds(0.9)).toBeCloseTo(54.0, 1);
    expect(Time.Minutes.toSeconds(123.0)).toBeCloseTo(7380.0, 1);
});

it('From Minutes to Hours and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Minutes.toHours(value)
            const convertBack = Time.Hours.toMinutes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Minutes to Hours', () => {
    expect(Time.Minutes.toHours(123.0)).toBeCloseTo(2.05, 1);
    expect(Time.Minutes.toHours(77.0)).toBeCloseTo(1.28333, 1);
    expect(Time.Minutes.toHours(0.8)).toBeCloseTo(0.0133333, 1);
});

it('From Minutes to Days and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Minutes.toDays(value)
            const convertBack = Time.Days.toMinutes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Minutes to Days', () => {
    expect(Time.Minutes.toDays(800.0)).toBeCloseTo(0.555556, 1);
    expect(Time.Minutes.toDays(190.0)).toBeCloseTo(0.131944, 1);
    expect(Time.Minutes.toDays(55.0)).toBeCloseTo(0.0381944, 1);
});

it('From Minutes to Weeks and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Minutes.toWeeks(value)
            const convertBack = Time.Weeks.toMinutes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Minutes to Weeks', () => {
    expect(Time.Minutes.toWeeks(1900.0)).toBeCloseTo(0.1884921, 1);
    expect(Time.Minutes.toWeeks(800.0)).toBeCloseTo(0.0793651, 1);
    expect(Time.Minutes.toWeeks(12345.0)).toBeCloseTo(1.2247024, 1);
});

it('From Minutes to Months and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Minutes.toMonths(value)
            const convertBack = Time.Months.toMinutes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Minutes to Months', () => {
    expect(Time.Minutes.toMonths(1234.0)).toBeCloseTo(0.02817349, 1);
    expect(Time.Minutes.toMonths(90000.0)).toBeCloseTo(2.0547923, 1);
    expect(Time.Minutes.toMonths(7100.0)).toBeCloseTo(0.1621003, 1);
});

it('From Minutes to Years and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Minutes.toYears(value)
            const convertBack = Time.Years.toMinutes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Minutes to Years', () => {
    expect(Time.Minutes.toYears(900800.0)).toBeCloseTo(1.71385084, 1);
    expect(Time.Minutes.toYears(12345.0)).toBeCloseTo(0.023487443, 1);
    expect(Time.Minutes.toYears(610910.0)).toBeCloseTo(1.16230974, 1);
});

it('From Minutes to Decades and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Minutes.toDecades(value)
            const convertBack = Time.Decades.toMinutes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Minutes to Centuries and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Minutes.toCenturies(value)
            const convertBack = Time.Centuries.toMinutes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Months to Seconds and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Months.toSeconds(value)
            const convertBack = Time.Seconds.toMonths(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Months to Seconds', () => {
    expect(Time.Months.toSeconds(0.03)).toBeCloseTo(78840.00, 1);
    expect(Time.Months.toSeconds(0.1)).toBeCloseTo(262800.0, 1);
    expect(Time.Months.toSeconds(0.008)).toBeCloseTo(21024.0, 1);
});

it('From Months to Minutes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Months.toMinutes(value)
            const convertBack = Time.Minutes.toMonths(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Months to Minutes', () => {
    expect(Time.Months.toMinutes(0.7)).toBeCloseTo(30660.0, 1);
    expect(Time.Months.toMinutes(1.4)).toBeCloseTo(61319.99, 1);
    expect(Time.Months.toMinutes(5.0)).toBeCloseTo(219000.0, 1);
});

it('From Months to Hours and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Months.toHours(value)
            const convertBack = Time.Hours.toMonths(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Months to Hours', () => {
    expect(Time.Months.toHours(4.0)).toBeCloseTo(2920.0, 1);
    expect(Time.Months.toHours(0.3)).toBeCloseTo(219.0, 1);
    expect(Time.Months.toHours(4.5)).toBeCloseTo(3285.0, 1);
});

it('From Months to Days and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Months.toDays(value)
            const convertBack = Time.Days.toMonths(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Months to Days', () => {
    expect(Time.Months.toDays(4.5)).toBeCloseTo(136.875, 1);
    expect(Time.Months.toDays(90.0)).toBeCloseTo(2737.53, 1);
    expect(Time.Months.toDays(0.4)).toBeCloseTo(12.1667, 1);
});

it('From Months to Weeks and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Months.toWeeks(value)
            const convertBack = Time.Weeks.toMonths(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Months to Weeks', () => {
    expect(Time.Months.toWeeks(0.5)).toBeCloseTo(2.17262, 1);
    expect(Time.Months.toWeeks(88.0)).toBeCloseTo(382.359, 1);
    expect(Time.Months.toWeeks(12.6)).toBeCloseTo(54.75006, 1);
});

it('From Months to Years and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Months.toYears(value)
            const convertBack = Time.Years.toMonths(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Months to Years', () => {
    expect(Time.Months.toYears(12.6)).toBeCloseTo(1.050001, 1);
    expect(Time.Months.toYears(109.0)).toBeCloseTo(9.08334, 1);
    expect(Time.Months.toYears(23.0)).toBeCloseTo(1.91667, 1);
});

it('From Months to Decades and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Months.toDecades(value)
            const convertBack = Time.Decades.toMonths(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Months to Centuries and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Months.toCenturies(value)
            const convertBack = Time.Centuries.toMonths(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Seconds to Minutes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Seconds.toMinutes(value)
            const convertBack = Time.Minutes.toSeconds(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Seconds to Minutes', () => {
    expect(Time.Seconds.toMinutes(100.0)).toBeCloseTo(1.66667, 1);
    expect(Time.Seconds.toMinutes(9000.0)).toBeCloseTo(150.0, 1);
    expect(Time.Seconds.toMinutes(2300.0)).toBeCloseTo(38.33333, 1);
});

it('From Seconds to Hours and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Seconds.toHours(value)
            const convertBack = Time.Hours.toSeconds(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Seconds to Hours', () => {
    expect(Time.Seconds.toHours(2300.0)).toBeCloseTo(0.6388889, 1);
    expect(Time.Seconds.toHours(9999.0)).toBeCloseTo(2.7775, 1);
    expect(Time.Seconds.toHours(36000.0)).toBeCloseTo(10.0, 1);
});

it('From Seconds to Days and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Seconds.toDays(value)
            const convertBack = Time.Days.toSeconds(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Seconds to Days', () => {
    expect(Time.Seconds.toDays(36000.0)).toBeCloseTo(0.41666667, 1);
    expect(Time.Seconds.toDays(90000.0)).toBeCloseTo(1.0416667, 1);
    expect(Time.Seconds.toDays(190000.0)).toBeCloseTo(2.19907407, 1);
});

it('From Seconds to Weeks and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Seconds.toWeeks(value)
            const convertBack = Time.Weeks.toSeconds(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Seconds to Weeks', () => {
    expect(Time.Seconds.toWeeks(190000.0)).toBeCloseTo(0.314153439, 1);
    expect(Time.Seconds.toWeeks(1234567.0)).toBeCloseTo(2.041281415, 1);
    expect(Time.Seconds.toWeeks(100200.0)).toBeCloseTo(0.165674603, 1);
});

it('From Seconds to Months and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Seconds.toMonths(value)
            const convertBack = Time.Months.toSeconds(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Seconds to Months', () => {
    expect(Time.Seconds.toMonths(1000000.0)).toBeCloseTo(0.380517087, 1);
    expect(Time.Seconds.toMonths(9876543.0)).toBeCloseTo(3.75819337, 1);
    expect(Time.Seconds.toMonths(200900.0)).toBeCloseTo(0.0764458827, 1);
});

it('From Seconds to Years and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Seconds.toYears(value)
            const convertBack = Time.Years.toSeconds(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Seconds to Years', () => {
    expect(Time.Seconds.toYears(123456789.0)).toBeCloseTo(3.91478909817, 1);
    expect(Time.Seconds.toYears(100900.0)).toBeCloseTo(0.00319951801, 1);
    expect(Time.Seconds.toYears(987654.0)).toBeCloseTo(0.0313183029, 1);
});

it('From Seconds to Decades and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Seconds.toDecades(value)
            const convertBack = Time.Decades.toSeconds(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Seconds to Centuries and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Seconds.toCenturies(value)
            const convertBack = Time.Centuries.toSeconds(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Weeks to Seconds and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Weeks.toSeconds(value)
            const convertBack = Time.Seconds.toWeeks(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Weeks to Seconds', () => {
    expect(Time.Weeks.toSeconds(0.1)).toBeCloseTo(60480.0, 1);
    expect(Time.Weeks.toSeconds(0.08)).toBeCloseTo(48384.0, 1);
    expect(Time.Weeks.toSeconds(3.0)).toBeCloseTo(1814400.0, 1);
});

it('From Weeks to Minutes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Weeks.toMinutes(value)
            const convertBack = Time.Minutes.toWeeks(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Weeks to Minutes', () => {
    expect(Time.Weeks.toMinutes(2.0)).toBeCloseTo(20160.0, 1);
    expect(Time.Weeks.toMinutes(0.4)).toBeCloseTo(4032.0, 1);
    expect(Time.Weeks.toMinutes(0.02)).toBeCloseTo(201.6, 1);
});

it('From Weeks to Hours and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Weeks.toHours(value)
            const convertBack = Time.Hours.toWeeks(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Weeks to Hours', () => {
    expect(Time.Weeks.toHours(0.02)).toBeCloseTo(3.36, 1);
    expect(Time.Weeks.toHours(77.0)).toBeCloseTo(12936.0, 1);
    expect(Time.Weeks.toHours(9.2)).toBeCloseTo(1545.6, 1);
});

it('From Weeks to Days and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Weeks.toDays(value)
            const convertBack = Time.Days.toWeeks(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Weeks to Days', () => {
    expect(Time.Weeks.toDays(9.2)).toBeCloseTo(64.4, 1);
    expect(Time.Weeks.toDays(169.0)).toBeCloseTo(1183.0, 1);
    expect(Time.Weeks.toDays(4.0)).toBeCloseTo(28.0, 1);
});

it('From Weeks to Months and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Weeks.toMonths(value)
            const convertBack = Time.Months.toWeeks(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Weeks to Months', () => {
    expect(Time.Weeks.toMonths(4.0)).toBeCloseTo(0.920547, 1);
    expect(Time.Weeks.toMonths(900.0)).toBeCloseTo(207.134637, 1);
    expect(Time.Weeks.toMonths(3.8)).toBeCloseTo(0.87452, 1);
});

it('From Weeks to Years and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Weeks.toYears(value)
            const convertBack = Time.Years.toWeeks(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Weeks to Years', () => {
    expect(Time.Weeks.toYears(3.0)).toBeCloseTo(0.0575342, 1);
    expect(Time.Weeks.toYears(235.0)).toBeCloseTo(4.50685, 1);
    expect(Time.Weeks.toYears(1090.0)).toBeCloseTo(20.90411, 1);
});

it('From Weeks to Decades and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Weeks.toDecades(value)
            const convertBack = Time.Decades.toWeeks(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Weeks to Centuries and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Weeks.toCenturies(value)
            const convertBack = Time.Centuries.toWeeks(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Years to Seconds and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Years.toSeconds(value)
            const convertBack = Time.Seconds.toYears(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Years to Seconds', () => {
    expect(Time.Years.toSeconds(0.06)).toBeCloseTo(1892160.0, 1);
    expect(Time.Years.toSeconds(0.009)).toBeCloseTo(283824.0, 1);
    expect(Time.Years.toSeconds(0.02)).toBeCloseTo(630720.0, 1);
});

it('From Years to Minutes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Years.toMinutes(value)
            const convertBack = Time.Minutes.toYears(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Years to Minutes', () => {
    expect(Time.Years.toMinutes(0.02)).toBeCloseTo(10512.0, 1);
    expect(Time.Years.toMinutes(0.3)).toBeCloseTo(157680.0, 1);
    expect(Time.Years.toMinutes(0.001)).toBeCloseTo(525.6, 1);
});

it('From Years to Hours and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Years.toHours(value)
            const convertBack = Time.Hours.toYears(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Years to Hours', () => {
    expect(Time.Years.toHours(0.001)).toBeCloseTo(8.76, 1);
    expect(Time.Years.toHours(0.3)).toBeCloseTo(2628.0, 1);
    expect(Time.Years.toHours(2.0)).toBeCloseTo(17520.0, 1);
});

it('From Years to Days and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Years.toDays(value)
            const convertBack = Time.Days.toYears(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Years to Days', () => {
    expect(Time.Years.toDays(2.0)).toBeCloseTo(730.0, 1);
    expect(Time.Years.toDays(1009.0)).toBeCloseTo(368285.0, 1);
    expect(Time.Years.toDays(7.0)).toBeCloseTo(2555.0, 1);
});

it('From Years to Weeks and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Years.toWeeks(value)
            const convertBack = Time.Weeks.toYears(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Years to Weeks', () => {
    expect(Time.Years.toWeeks(7.0)).toBeCloseTo(365.0, 1);
    expect(Time.Years.toWeeks(1.3)).toBeCloseTo(67.7857, 1);
    expect(Time.Years.toWeeks(88.0)).toBeCloseTo(4588.5839, 1);
});

it('From Years to Months and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Years.toMonths(value)
            const convertBack = Time.Months.toYears(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Years to Months', () => {
    expect(Time.Years.toMonths(6.0)).toBeCloseTo(71.9999, 1);
    expect(Time.Years.toMonths(12.0)).toBeCloseTo(144.0, 1);
    expect(Time.Years.toMonths(0.3)).toBeCloseTo(3.6, 1);
});

it('From Years to Decades and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Years.toDecades(value)
            const convertBack = Time.Decades.toYears(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('From Years to Centuries and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Time.Years.toCenturies(value)
            const convertBack = Time.Centuries.toYears(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

