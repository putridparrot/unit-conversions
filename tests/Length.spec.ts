// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

import * as fc from 'fast-check';
import { Length } from '../src/Length';

it('From Centimetres to Millimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Centimetres.toMillimetres(value)
            const convertBack = Length.Millimetres.toCentimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Centimetres to Millimetres', () => {
    expect(Length.Centimetres.toMillimetres(900.0)).toBeCloseTo(9000.0, 1);
    expect(Length.Centimetres.toMillimetres(34.9)).toBeCloseTo(349.0, 1);
    expect(Length.Centimetres.toMillimetres(2.0)).toBeCloseTo(20.0, 1);
});

it('From Centimetres to Metres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Centimetres.toMetres(value)
            const convertBack = Length.Metres.toCentimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Centimetres to Metres', () => {
    expect(Length.Centimetres.toMetres(13.0)).toBeCloseTo(0.13, 1);
    expect(Length.Centimetres.toMetres(3900.0)).toBeCloseTo(39.0, 1);
    expect(Length.Centimetres.toMetres(1.0)).toBeCloseTo(0.01, 1);
});

it('From Centimetres to Kilometres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Centimetres.toKilometres(value)
            const convertBack = Length.Kilometres.toCentimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Centimetres to Kilometres', () => {
    expect(Length.Centimetres.toKilometres(123456.0)).toBeCloseTo(1.23456, 1);
    expect(Length.Centimetres.toKilometres(8900.0)).toBeCloseTo(0.089, 1);
    expect(Length.Centimetres.toKilometres(6009000.0)).toBeCloseTo(60.09, 1);
});

it('From Centimetres to Inches and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Centimetres.toInches(value)
            const convertBack = Length.Inches.toCentimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Centimetres to Inches', () => {
    expect(Length.Centimetres.toInches(600.0)).toBeCloseTo(236.22, 1);
    expect(Length.Centimetres.toInches(12.0)).toBeCloseTo(4.72441, 1);
    expect(Length.Centimetres.toInches(7.8)).toBeCloseTo(3.07087, 1);
});

it('From Centimetres to Feet and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Centimetres.toFeet(value)
            const convertBack = Length.Feet.toCentimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Centimetres to Feet', () => {
    expect(Length.Centimetres.toFeet(12.3)).toBeCloseTo(0.4035433, 1);
    expect(Length.Centimetres.toFeet(89.0)).toBeCloseTo(2.91995, 1);
    expect(Length.Centimetres.toFeet(0.7)).toBeCloseTo(0.0229659, 1);
});

it('From Centimetres to Yards and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Centimetres.toYards(value)
            const convertBack = Length.Yards.toCentimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Centimetres to Yards', () => {
    expect(Length.Centimetres.toYards(700.0)).toBeCloseTo(7.65529, 1);
    expect(Length.Centimetres.toYards(56.3)).toBeCloseTo(0.6157043, 1);
    expect(Length.Centimetres.toYards(8.0)).toBeCloseTo(0.0874891, 1);
});

it('From Centimetres to Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Centimetres.toMiles(value)
            const convertBack = Length.Miles.toCentimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Centimetres to Miles', () => {
    expect(Length.Centimetres.toMiles(80000.0)).toBeCloseTo(0.49709695, 1);
    expect(Length.Centimetres.toMiles(123456.0)).toBeCloseTo(0.767120019, 1);
    expect(Length.Centimetres.toMiles(90909090.0)).toBeCloseTo(564.88289639, 1);
});

it('From Centimetres to Nautical Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Centimetres.toNauticalMiles(value)
            const convertBack = Length.NauticalMiles.toCentimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Centimetres to Nautical Miles', () => {
    expect(Length.Centimetres.toNauticalMiles(30000.0)).toBeCloseTo(0.16198704, 1);
    expect(Length.Centimetres.toNauticalMiles(987654.0)).toBeCloseTo(5.33290497, 1);
    expect(Length.Centimetres.toNauticalMiles(100200.0)).toBeCloseTo(0.541036717, 1);
});

it('From Feet to Millimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Feet.toMillimetres(value)
            const convertBack = Length.Millimetres.toFeet(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Feet to Millimetres', () => {
    expect(Length.Feet.toMillimetres(0.3)).toBeCloseTo(91.44, 1);
    expect(Length.Feet.toMillimetres(2.0)).toBeCloseTo(609.6, 1);
    expect(Length.Feet.toMillimetres(0.06)).toBeCloseTo(18.288, 1);
});

it('From Feet to Centimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Feet.toCentimetres(value)
            const convertBack = Length.Centimetres.toFeet(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Feet to Centimetres', () => {
    expect(Length.Feet.toCentimetres(0.07)).toBeCloseTo(2.1336, 1);
    expect(Length.Feet.toCentimetres(3.5)).toBeCloseTo(106.68, 1);
    expect(Length.Feet.toCentimetres(89.0)).toBeCloseTo(2712.72, 1);
});

it('From Feet to Metres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Feet.toMetres(value)
            const convertBack = Length.Metres.toFeet(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Feet to Metres', () => {
    expect(Length.Feet.toMetres(900.0)).toBeCloseTo(274.32, 1);
    expect(Length.Feet.toMetres(1.2)).toBeCloseTo(0.36576, 1);
    expect(Length.Feet.toMetres(0.8)).toBeCloseTo(0.24384, 1);
});

it('From Feet to Kilometres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Feet.toKilometres(value)
            const convertBack = Length.Kilometres.toFeet(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Feet to Kilometres', () => {
    expect(Length.Feet.toKilometres(1999.0)).toBeCloseTo(0.6092952, 1);
    expect(Length.Feet.toKilometres(123456.0)).toBeCloseTo(37.6293888, 1);
    expect(Length.Feet.toKilometres(800.0)).toBeCloseTo(0.24384, 1);
});

it('From Feet to Inches and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Feet.toInches(value)
            const convertBack = Length.Inches.toFeet(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Feet to Inches', () => {
    expect(Length.Feet.toInches(8.0)).toBeCloseTo(96.0, 1);
    expect(Length.Feet.toInches(1.2)).toBeCloseTo(14.4, 1);
    expect(Length.Feet.toInches(0.4)).toBeCloseTo(4.8, 1);
});

it('From Feet to Yards and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Feet.toYards(value)
            const convertBack = Length.Yards.toFeet(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Feet to Yards', () => {
    expect(Length.Feet.toYards(78.0)).toBeCloseTo(26.0, 1);
    expect(Length.Feet.toYards(0.1)).toBeCloseTo(0.0333333, 1);
    expect(Length.Feet.toYards(7162.0)).toBeCloseTo(2387.333, 1);
});

it('From Feet to Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Feet.toMiles(value)
            const convertBack = Length.Miles.toFeet(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Feet to Miles', () => {
    expect(Length.Feet.toMiles(9000.0)).toBeCloseTo(1.704545, 1);
    expect(Length.Feet.toMiles(1999.0)).toBeCloseTo(0.3785985, 1);
    expect(Length.Feet.toMiles(5020.0)).toBeCloseTo(0.9507576, 1);
});

it('From Feet to Nautical Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Feet.toNauticalMiles(value)
            const convertBack = Length.NauticalMiles.toFeet(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Feet to Nautical Miles', () => {
    expect(Length.Feet.toNauticalMiles(8765.0)).toBeCloseTo(1.442533, 1);
    expect(Length.Feet.toNauticalMiles(19000.0)).toBeCloseTo(3.1269978, 1);
    expect(Length.Feet.toNauticalMiles(1000.0)).toBeCloseTo(0.164579, 1);
});

it('From Inches to Millimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Inches.toMillimetres(value)
            const convertBack = Length.Millimetres.toInches(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Inches to Millimetres', () => {
    expect(Length.Inches.toMillimetres(1.0)).toBeCloseTo(25.4, 1);
    expect(Length.Inches.toMillimetres(0.6)).toBeCloseTo(15.24, 1);
    expect(Length.Inches.toMillimetres(456.0)).toBeCloseTo(11582.4, 1);
});

it('From Inches to Centimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Inches.toCentimetres(value)
            const convertBack = Length.Centimetres.toInches(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Inches to Centimetres', () => {
    expect(Length.Inches.toCentimetres(123.0)).toBeCloseTo(312.42, 1);
    expect(Length.Inches.toCentimetres(0.9)).toBeCloseTo(2.286, 1);
    expect(Length.Inches.toCentimetres(3.4)).toBeCloseTo(8.636, 1);
});

it('From Inches to Metres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Inches.toMetres(value)
            const convertBack = Length.Metres.toInches(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Inches to Metres', () => {
    expect(Length.Inches.toMetres(3.4)).toBeCloseTo(0.08636, 1);
    expect(Length.Inches.toMetres(1002.0)).toBeCloseTo(25.4508, 1);
    expect(Length.Inches.toMetres(56.0)).toBeCloseTo(1.4224, 1);
});

it('From Inches to Kilometres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Inches.toKilometres(value)
            const convertBack = Length.Kilometres.toInches(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Inches to Kilometres', () => {
    expect(Length.Inches.toKilometres(17890.0)).toBeCloseTo(0.454406, 1);
    expect(Length.Inches.toKilometres(999000.0)).toBeCloseTo(25.3746, 1);
    expect(Length.Inches.toKilometres(100200.0)).toBeCloseTo(2.54508, 1);
});

it('From Inches to Feet and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Inches.toFeet(value)
            const convertBack = Length.Feet.toInches(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Inches to Feet', () => {
    expect(Length.Inches.toFeet(23.0)).toBeCloseTo(1.91667, 1);
    expect(Length.Inches.toFeet(0.9)).toBeCloseTo(0.075, 1);
    expect(Length.Inches.toFeet(479.0)).toBeCloseTo(39.9167, 1);
});

it('From Inches to Yards and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Inches.toYards(value)
            const convertBack = Length.Yards.toInches(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Inches to Yards', () => {
    expect(Length.Inches.toYards(123.0)).toBeCloseTo(3.41667, 1);
    expect(Length.Inches.toYards(6.7)).toBeCloseTo(0.186111, 1);
    expect(Length.Inches.toYards(9.0)).toBeCloseTo(0.25, 1);
});

it('From Inches to Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Inches.toMiles(value)
            const convertBack = Length.Miles.toInches(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Inches to Miles', () => {
    expect(Length.Inches.toMiles(9000.0)).toBeCloseTo(0.1420455, 1);
    expect(Length.Inches.toMiles(123456.0)).toBeCloseTo(1.94848485, 1);
    expect(Length.Inches.toMiles(8800.0)).toBeCloseTo(0.1388889, 1);
});

it('From Inches to Nautical Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Inches.toNauticalMiles(value)
            const convertBack = Length.NauticalMiles.toInches(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Inches to Nautical Miles', () => {
    expect(Length.Inches.toNauticalMiles(9000.0)).toBeCloseTo(0.1234341, 1);
    expect(Length.Inches.toNauticalMiles(123456.0)).toBeCloseTo(1.69318704, 1);
    expect(Length.Inches.toNauticalMiles(100200.0)).toBeCloseTo(1.37423326, 1);
});

it('From Kilometres to Millimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Kilometres.toMillimetres(value)
            const convertBack = Length.Millimetres.toKilometres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilometres to Millimetres', () => {
    expect(Length.Kilometres.toMillimetres(0.09)).toBeCloseTo(90000.0, 1);
    expect(Length.Kilometres.toMillimetres(0.12)).toBeCloseTo(120000.0, 1);
    expect(Length.Kilometres.toMillimetres(2.3)).toBeCloseTo(2.3e+6, 1);
});

it('From Kilometres to Centimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Kilometres.toCentimetres(value)
            const convertBack = Length.Centimetres.toKilometres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilometres to Centimetres', () => {
    expect(Length.Kilometres.toCentimetres(7.9)).toBeCloseTo(790000.0, 1);
    expect(Length.Kilometres.toCentimetres(0.2)).toBeCloseTo(20000.0, 1);
    expect(Length.Kilometres.toCentimetres(0.09)).toBeCloseTo(9000.0, 1);
});

it('From Kilometres to Metres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Kilometres.toMetres(value)
            const convertBack = Length.Metres.toKilometres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilometres to Metres', () => {
    expect(Length.Kilometres.toMetres(0.8)).toBeCloseTo(800.0, 1);
    expect(Length.Kilometres.toMetres(45.0)).toBeCloseTo(45000.0, 1);
    expect(Length.Kilometres.toMetres(1.2)).toBeCloseTo(1200, 1);
});

it('From Kilometres to Inches and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Kilometres.toInches(value)
            const convertBack = Length.Inches.toKilometres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilometres to Inches', () => {
    expect(Length.Kilometres.toInches(1.2)).toBeCloseTo(47244.1, 1);
    expect(Length.Kilometres.toInches(0.65)).toBeCloseTo(25590.55, 1);
    expect(Length.Kilometres.toInches(5.0)).toBeCloseTo(196850.3937, 1);
});

it('From Kilometres to Feet and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Kilometres.toFeet(value)
            const convertBack = Length.Feet.toKilometres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilometres to Feet', () => {
    expect(Length.Kilometres.toFeet(3.8)).toBeCloseTo(12467.2, 1);
    expect(Length.Kilometres.toFeet(1.2)).toBeCloseTo(3937.01, 1);
    expect(Length.Kilometres.toFeet(0.65)).toBeCloseTo(2132.546, 1);
});

it('From Kilometres to Yards and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Kilometres.toYards(value)
            const convertBack = Length.Yards.toKilometres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilometres to Yards', () => {
    expect(Length.Kilometres.toYards(0.08)).toBeCloseTo(87.48906, 1);
    expect(Length.Kilometres.toYards(1.2)).toBeCloseTo(1312.34, 1);
    expect(Length.Kilometres.toYards(34.0)).toBeCloseTo(37182.852143, 1);
});

it('From Kilometres to Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Kilometres.toMiles(value)
            const convertBack = Length.Miles.toKilometres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilometres to Miles', () => {
    expect(Length.Kilometres.toMiles(12.0)).toBeCloseTo(7.45645, 1);
    expect(Length.Kilometres.toMiles(0.9)).toBeCloseTo(0.559234, 1);
    expect(Length.Kilometres.toMiles(3.9)).toBeCloseTo(2.42335, 1);
});

it('From Kilometres to Nautical Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Kilometres.toNauticalMiles(value)
            const convertBack = Length.NauticalMiles.toKilometres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilometres to Nautical Miles', () => {
    expect(Length.Kilometres.toNauticalMiles(1.2)).toBeCloseTo(0.647948, 1);
    expect(Length.Kilometres.toNauticalMiles(0.2)).toBeCloseTo(0.107991, 1);
    expect(Length.Kilometres.toNauticalMiles(99.9)).toBeCloseTo(53.94168, 1);
});

it('From Metres to Millimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Metres.toMillimetres(value)
            const convertBack = Length.Millimetres.toMetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Metres to Millimetres', () => {
    expect(Length.Metres.toMillimetres(123.0)).toBeCloseTo(123000.0, 1);
    expect(Length.Metres.toMillimetres(0.9)).toBeCloseTo(900.0, 1);
    expect(Length.Metres.toMillimetres(0.0023)).toBeCloseTo(2.3, 1);
});

it('From Metres to Centimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Metres.toCentimetres(value)
            const convertBack = Length.Centimetres.toMetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Metres to Centimetres', () => {
    expect(Length.Metres.toCentimetres(2.3)).toBeCloseTo(230.0, 1);
    expect(Length.Metres.toCentimetres(34.0)).toBeCloseTo(3400.0, 1);
    expect(Length.Metres.toCentimetres(0.9)).toBeCloseTo(90.0, 1);
});

it('From Metres to Kilometres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Metres.toKilometres(value)
            const convertBack = Length.Kilometres.toMetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Metres to Kilometres', () => {
    expect(Length.Metres.toKilometres(100.0)).toBeCloseTo(0.1, 1);
    expect(Length.Metres.toKilometres(123456.0)).toBeCloseTo(123.456, 1);
    expect(Length.Metres.toKilometres(91.1)).toBeCloseTo(0.0911, 1);
});

it('From Metres to Inches and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Metres.toInches(value)
            const convertBack = Length.Inches.toMetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Metres to Inches', () => {
    expect(Length.Metres.toInches(12.0)).toBeCloseTo(472.441, 1);
    expect(Length.Metres.toInches(9.3)).toBeCloseTo(366.142, 1);
    expect(Length.Metres.toInches(0.1)).toBeCloseTo(3.93701, 1);
});

it('From Metres to Feet and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Metres.toFeet(value)
            const convertBack = Length.Feet.toMetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Metres to Feet', () => {
    expect(Length.Metres.toFeet(67.0)).toBeCloseTo(219.816, 1);
    expect(Length.Metres.toFeet(1.2)).toBeCloseTo(3.93701, 1);
    expect(Length.Metres.toFeet(0.7)).toBeCloseTo(2.29659, 1);
});

it('From Metres to Yards and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Metres.toYards(value)
            const convertBack = Length.Yards.toMetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Metres to Yards', () => {
    expect(Length.Metres.toYards(0.8)).toBeCloseTo(0.874891, 1);
    expect(Length.Metres.toYards(34.5)).toBeCloseTo(37.72966, 1);
    expect(Length.Metres.toYards(1.23)).toBeCloseTo(1.345144, 1);
});

it('From Metres to Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Metres.toMiles(value)
            const convertBack = Length.Miles.toMetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Metres to Miles', () => {
    expect(Length.Metres.toMiles(7900.0)).toBeCloseTo(4.908832, 1);
    expect(Length.Metres.toMiles(123456.0)).toBeCloseTo(76.7120019, 1);
    expect(Length.Metres.toMiles(1000.0)).toBeCloseTo(0.621371, 1);
});

it('From Metres to Nautical Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Metres.toNauticalMiles(value)
            const convertBack = Length.NauticalMiles.toMetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Metres to Nautical Miles', () => {
    expect(Length.Metres.toNauticalMiles(900.0)).toBeCloseTo(0.485961, 1);
    expect(Length.Metres.toNauticalMiles(71819.0)).toBeCloseTo(38.779158, 1);
    expect(Length.Metres.toNauticalMiles(123456.0)).toBeCloseTo(66.6609071, 1);
});

it('From Miles to Millimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Miles.toMillimetres(value)
            const convertBack = Length.Millimetres.toMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Miles to Millimetres', () => {
    expect(Length.Miles.toMillimetres(0.09)).toBeCloseTo(144840.95999, 1);
    expect(Length.Miles.toMillimetres(0.001)).toBeCloseTo(1609.344, 1);
    expect(Length.Miles.toMillimetres(0.5)).toBeCloseTo(804672.0, 1);
});

it('From Miles to Centimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Miles.toCentimetres(value)
            const convertBack = Length.Centimetres.toMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Miles to Centimetres', () => {
    expect(Length.Miles.toCentimetres(0.23)).toBeCloseTo(37014.91, 1);
    expect(Length.Miles.toCentimetres(0.01)).toBeCloseTo(1609.344, 1);
    expect(Length.Miles.toCentimetres(0.8)).toBeCloseTo(128747.52, 1);
});

it('From Miles to Metres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Miles.toMetres(value)
            const convertBack = Length.Metres.toMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Miles to Metres', () => {
    expect(Length.Miles.toMetres(0.1)).toBeCloseTo(160.934, 1);
    expect(Length.Miles.toMetres(0.08)).toBeCloseTo(128.7475, 1);
    expect(Length.Miles.toMetres(0.002)).toBeCloseTo(3.218688, 1);
});

it('From Miles to Kilometres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Miles.toKilometres(value)
            const convertBack = Length.Kilometres.toMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Miles to Kilometres', () => {
    expect(Length.Miles.toKilometres(2.0)).toBeCloseTo(3.21869, 1);
    expect(Length.Miles.toKilometres(0.8)).toBeCloseTo(1.28748, 1);
    expect(Length.Miles.toKilometres(23.0)).toBeCloseTo(37.0149, 1);
});

it('From Miles to Inches and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Miles.toInches(value)
            const convertBack = Length.Inches.toMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Miles to Inches', () => {
    expect(Length.Miles.toInches(0.7)).toBeCloseTo(44352.0, 1);
    expect(Length.Miles.toInches(0.09)).toBeCloseTo(5702.4, 1);
    expect(Length.Miles.toInches(2.0)).toBeCloseTo(126720.0, 1);
});

it('From Miles to Feet and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Miles.toFeet(value)
            const convertBack = Length.Feet.toMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Miles to Feet', () => {
    expect(Length.Miles.toFeet(2.0)).toBeCloseTo(10560.0, 1);
    expect(Length.Miles.toFeet(0.6)).toBeCloseTo(3168.0, 1);
    expect(Length.Miles.toFeet(0.07)).toBeCloseTo(369.6, 1);
});

it('From Miles to Yards and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Miles.toYards(value)
            const convertBack = Length.Yards.toMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Miles to Yards', () => {
    expect(Length.Miles.toYards(0.07)).toBeCloseTo(123.2, 1);
    expect(Length.Miles.toYards(2.0)).toBeCloseTo(3520.0, 1);
    expect(Length.Miles.toYards(8.1)).toBeCloseTo(14256.0, 1);
});

it('From Miles to Nautical Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Miles.toNauticalMiles(value)
            const convertBack = Length.NauticalMiles.toMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Miles to Nautical Miles', () => {
    expect(Length.Miles.toNauticalMiles(8.1)).toBeCloseTo(7.03871, 1);
    expect(Length.Miles.toNauticalMiles(0.8)).toBeCloseTo(0.695181, 1);
    expect(Length.Miles.toNauticalMiles(1.2)).toBeCloseTo(1.04277, 1);
});

it('From Millimetres to Centimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Millimetres.toCentimetres(value)
            const convertBack = Length.Centimetres.toMillimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Millimetres to Centimetres', () => {
    expect(Length.Millimetres.toCentimetres(900.0)).toBeCloseTo(90.0, 1);
    expect(Length.Millimetres.toCentimetres(190.0)).toBeCloseTo(19.0, 1);
    expect(Length.Millimetres.toCentimetres(5000.0)).toBeCloseTo(500.0, 1);
});

it('From Millimetres to Metres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Millimetres.toMetres(value)
            const convertBack = Length.Metres.toMillimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Millimetres to Metres', () => {
    expect(Length.Millimetres.toMetres(1090.0)).toBeCloseTo(1.09, 1);
    expect(Length.Millimetres.toMetres(9000.0)).toBeCloseTo(9.0, 1);
    expect(Length.Millimetres.toMetres(12345.0)).toBeCloseTo(12.345, 1);
});

it('From Millimetres to Kilometres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Millimetres.toKilometres(value)
            const convertBack = Length.Kilometres.toMillimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Millimetres to Kilometres', () => {
    expect(Length.Millimetres.toKilometres(109000.0)).toBeCloseTo(0.109, 1);
    expect(Length.Millimetres.toKilometres(9876543.0)).toBeCloseTo(9.876543, 1);
    expect(Length.Millimetres.toKilometres(900800.0)).toBeCloseTo(0.9008, 1);
});

it('From Millimetres to Inches and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Millimetres.toInches(value)
            const convertBack = Length.Inches.toMillimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Millimetres to Inches', () => {
    expect(Length.Millimetres.toInches(900.0)).toBeCloseTo(35.4331, 1);
    expect(Length.Millimetres.toInches(123.0)).toBeCloseTo(4.84252, 1);
    expect(Length.Millimetres.toInches(80.0)).toBeCloseTo(3.14961, 1);
});

it('From Millimetres to Feet and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Millimetres.toFeet(value)
            const convertBack = Length.Feet.toMillimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Millimetres to Feet', () => {
    expect(Length.Millimetres.toFeet(800.0)).toBeCloseTo(2.62467, 1);
    expect(Length.Millimetres.toFeet(1234.0)).toBeCloseTo(4.048556, 1);
    expect(Length.Millimetres.toFeet(600.8)).toBeCloseTo(1.9711286, 1);
});

it('From Millimetres to Yards and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Millimetres.toYards(value)
            const convertBack = Length.Yards.toMillimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Millimetres to Yards', () => {
    expect(Length.Millimetres.toYards(800.0)).toBeCloseTo(0.874891, 1);
    expect(Length.Millimetres.toYards(1200.0)).toBeCloseTo(1.312336, 1);
    expect(Length.Millimetres.toYards(909.0)).toBeCloseTo(0.994094, 1);
});

it('From Millimetres to Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Millimetres.toMiles(value)
            const convertBack = Length.Miles.toMillimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Millimetres to Miles', () => {
    expect(Length.Millimetres.toMiles(900000.0)).toBeCloseTo(0.559234073, 1);
    expect(Length.Millimetres.toMiles(12345678.9)).toBeCloseTo(7.671249217072, 1);
    expect(Length.Millimetres.toMiles(100200300.0)).toBeCloseTo(62.2615798735, 1);
});

it('From Millimetres to Nautical Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Millimetres.toNauticalMiles(value)
            const convertBack = Length.NauticalMiles.toMillimetres(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Millimetres to Nautical Miles', () => {
    expect(Length.Millimetres.toNauticalMiles(9000000.0)).toBeCloseTo(4.859611231, 1);
    expect(Length.Millimetres.toNauticalMiles(12345678.0)).toBeCloseTo(6.6661328294, 1);
    expect(Length.Millimetres.toNauticalMiles(926000.0)).toBeCloseTo(0.5, 1);
});

it('From Nautical Miles to Millimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.NauticalMiles.toMillimetres(value)
            const convertBack = Length.Millimetres.toNauticalMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Nautical Miles to Millimetres', () => {
    expect(Length.NauticalMiles.toMillimetres(0.08)).toBeCloseTo(148160.0, 1);
    expect(Length.NauticalMiles.toMillimetres(0.001)).toBeCloseTo(1852.0, 1);
    expect(Length.NauticalMiles.toMillimetres(0.02)).toBeCloseTo(37040.0, 1);
});

it('From Nautical Miles to Centimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.NauticalMiles.toCentimetres(value)
            const convertBack = Length.Centimetres.toNauticalMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Nautical Miles to Centimetres', () => {
    expect(Length.NauticalMiles.toCentimetres(0.9)).toBeCloseTo(166680.0, 1);
    expect(Length.NauticalMiles.toCentimetres(1.2)).toBeCloseTo(222240.0, 1);
    expect(Length.NauticalMiles.toCentimetres(0.1)).toBeCloseTo(18520.0, 1);
});

it('From Nautical Miles to Metres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.NauticalMiles.toMetres(value)
            const convertBack = Length.Metres.toNauticalMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Nautical Miles to Metres', () => {
    expect(Length.NauticalMiles.toMetres(0.1)).toBeCloseTo(185.2, 1);
    expect(Length.NauticalMiles.toMetres(1.2)).toBeCloseTo(2222.4, 1);
    expect(Length.NauticalMiles.toMetres(89.0)).toBeCloseTo(164828.0, 1);
});

it('From Nautical Miles to Kilometres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.NauticalMiles.toKilometres(value)
            const convertBack = Length.Kilometres.toNauticalMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Nautical Miles to Kilometres', () => {
    expect(Length.NauticalMiles.toKilometres(23.0)).toBeCloseTo(42.596, 1);
    expect(Length.NauticalMiles.toKilometres(1.7)).toBeCloseTo(3.1484, 1);
    expect(Length.NauticalMiles.toKilometres(56.0)).toBeCloseTo(103.712, 1);
});

it('From Nautical Miles to Inches and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.NauticalMiles.toInches(value)
            const convertBack = Length.Inches.toNauticalMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Nautical Miles to Inches', () => {
    expect(Length.NauticalMiles.toInches(0.1)).toBeCloseTo(7291.34, 1);
    expect(Length.NauticalMiles.toInches(2.0)).toBeCloseTo(145826.7999, 1);
    expect(Length.NauticalMiles.toInches(3.5)).toBeCloseTo(255196.899, 1);
});

it('From Nautical Miles to Feet and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.NauticalMiles.toFeet(value)
            const convertBack = Length.Feet.toNauticalMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Nautical Miles to Feet', () => {
    expect(Length.NauticalMiles.toFeet(1.4)).toBeCloseTo(8506.56, 1);
    expect(Length.NauticalMiles.toFeet(0.1)).toBeCloseTo(607.612, 1);
    expect(Length.NauticalMiles.toFeet(8.9)).toBeCloseTo(54077.4680, 1);
});

it('From Nautical Miles to Yards and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.NauticalMiles.toYards(value)
            const convertBack = Length.Yards.toNauticalMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Nautical Miles to Yards', () => {
    expect(Length.NauticalMiles.toYards(9.0)).toBeCloseTo(18228.329, 1);
    expect(Length.NauticalMiles.toYards(1.5)).toBeCloseTo(3038.06, 1);
    expect(Length.NauticalMiles.toYards(0.8)).toBeCloseTo(1620.3, 1);
});

it('From Nautical Miles to Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.NauticalMiles.toMiles(value)
            const convertBack = Length.Miles.toNauticalMiles(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Nautical Miles to Miles', () => {
    expect(Length.NauticalMiles.toMiles(0.5)).toBeCloseTo(0.57539, 1);
    expect(Length.NauticalMiles.toMiles(23.0)).toBeCloseTo(26.4679, 1);
    expect(Length.NauticalMiles.toMiles(8.2)).toBeCloseTo(9.43639, 1);
});

it('From Yards to Millimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Yards.toMillimetres(value)
            const convertBack = Length.Millimetres.toYards(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Yards to Millimetres', () => {
    expect(Length.Yards.toMillimetres(34.0)).toBeCloseTo(31089.6, 1);
    expect(Length.Yards.toMillimetres(0.9)).toBeCloseTo(822.96, 1);
    expect(Length.Yards.toMillimetres(2.0)).toBeCloseTo(1828.8, 1);
});

it('From Yards to Centimetres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Yards.toCentimetres(value)
            const convertBack = Length.Centimetres.toYards(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Yards to Centimetres', () => {
    expect(Length.Yards.toCentimetres(9.8)).toBeCloseTo(896.112, 1);
    expect(Length.Yards.toCentimetres(0.8)).toBeCloseTo(73.152, 1);
    expect(Length.Yards.toCentimetres(12.0)).toBeCloseTo(1097.28, 1);
});

it('From Yards to Metres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Yards.toMetres(value)
            const convertBack = Length.Metres.toYards(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Yards to Metres', () => {
    expect(Length.Yards.toMetres(12.0)).toBeCloseTo(10.9728, 1);
    expect(Length.Yards.toMetres(0.7)).toBeCloseTo(0.64008, 1);
    expect(Length.Yards.toMetres(3.0)).toBeCloseTo(2.7432, 1);
});

it('From Yards to Kilometres and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Yards.toKilometres(value)
            const convertBack = Length.Kilometres.toYards(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Yards to Kilometres', () => {
    expect(Length.Yards.toKilometres(400.0)).toBeCloseTo(0.36576, 1);
    expect(Length.Yards.toKilometres(1900.0)).toBeCloseTo(1.73736, 1);
    expect(Length.Yards.toKilometres(12345.0)).toBeCloseTo(11.288268, 1);
});

it('From Yards to Inches and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Yards.toInches(value)
            const convertBack = Length.Inches.toYards(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Yards to Inches', () => {
    expect(Length.Yards.toInches(23.0)).toBeCloseTo(828.0, 1);
    expect(Length.Yards.toInches(0.9)).toBeCloseTo(32.4, 1);
    expect(Length.Yards.toInches(12.0)).toBeCloseTo(432.0, 1);
});

it('From Yards to Feet and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Yards.toFeet(value)
            const convertBack = Length.Feet.toYards(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Yards to Feet', () => {
    expect(Length.Yards.toFeet(12.0)).toBeCloseTo(36.0, 1);
    expect(Length.Yards.toFeet(1.8)).toBeCloseTo(5.4, 1);
    expect(Length.Yards.toFeet(67.0)).toBeCloseTo(201.0, 1);
});

it('From Yards to Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Yards.toMiles(value)
            const convertBack = Length.Miles.toYards(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Yards to Miles', () => {
    expect(Length.Yards.toMiles(8900.0)).toBeCloseTo(5.056818, 1);
    expect(Length.Yards.toMiles(5000.0)).toBeCloseTo(2.840909, 1);
    expect(Length.Yards.toMiles(123456.0)).toBeCloseTo(70.1454545, 1);
});

it('From Yards to Nautical Miles and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Length.Yards.toNauticalMiles(value)
            const convertBack = Length.NauticalMiles.toYards(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Yards to Nautical Miles', () => {
    expect(Length.Yards.toNauticalMiles(1000.0)).toBeCloseTo(0.493737, 1);
    expect(Length.Yards.toNauticalMiles(202020.0)).toBeCloseTo(99.7446479, 1);
    expect(Length.Yards.toNauticalMiles(71928.0)).toBeCloseTo(35.513479, 1);
});

