// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

import * as fc from 'fast-check';
import { LuminousEnergy } from '../src/LuminousEnergy';

it('From LumenHour to Talbot and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = LuminousEnergy.LumenHour.toTalbot(value)
            const convertBack = LuminousEnergy.Talbot.toLumenHour(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known LumenHour to Talbot', () => {
    expect(LuminousEnergy.LumenHour.toTalbot(9.0)).toBeCloseTo(32400.0, 1);
    expect(LuminousEnergy.LumenHour.toTalbot(1.2)).toBeCloseTo(4320.0, 1);
    expect(LuminousEnergy.LumenHour.toTalbot(4.0)).toBeCloseTo(14400.0, 1);
});

it('From LumenHour to LumenMinute and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = LuminousEnergy.LumenHour.toLumenMinute(value)
            const convertBack = LuminousEnergy.LumenMinute.toLumenHour(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known LumenHour to LumenMinute', () => {
    expect(LuminousEnergy.LumenHour.toLumenMinute(1.2)).toBeCloseTo(72.0, 1);
    expect(LuminousEnergy.LumenHour.toLumenMinute(0.8)).toBeCloseTo(48.0, 1);
    expect(LuminousEnergy.LumenHour.toLumenMinute(109.00)).toBeCloseTo(6540, 1);
});

it('From LumenHour to LumenSecond and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = LuminousEnergy.LumenHour.toLumenSecond(value)
            const convertBack = LuminousEnergy.LumenSecond.toLumenHour(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known LumenHour to LumenSecond', () => {
    expect(LuminousEnergy.LumenHour.toLumenSecond(109.0)).toBeCloseTo(392400.0, 1);
    expect(LuminousEnergy.LumenHour.toLumenSecond(6.1)).toBeCloseTo(21960.0, 1);
    expect(LuminousEnergy.LumenHour.toLumenSecond(0.7)).toBeCloseTo(2520.0, 1);
});

it('From LumenMinute to Talbot and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = LuminousEnergy.LumenMinute.toTalbot(value)
            const convertBack = LuminousEnergy.Talbot.toLumenMinute(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known LumenMinute to Talbot', () => {
    expect(LuminousEnergy.LumenMinute.toTalbot(0.7)).toBeCloseTo(42.0, 1);
    expect(LuminousEnergy.LumenMinute.toTalbot(678.0)).toBeCloseTo(40680.0, 1);
    expect(LuminousEnergy.LumenMinute.toTalbot(89.0)).toBeCloseTo(5340.0, 1);
});

it('From LumenMinute to LumenHour and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = LuminousEnergy.LumenMinute.toLumenHour(value)
            const convertBack = LuminousEnergy.LumenHour.toLumenMinute(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known LumenMinute to LumenHour', () => {
    expect(LuminousEnergy.LumenMinute.toLumenHour(89.0)).toBeCloseTo(1.4833, 1);
    expect(LuminousEnergy.LumenMinute.toLumenHour(9.0)).toBeCloseTo(0.15, 1);
    expect(LuminousEnergy.LumenMinute.toLumenHour(0.123)).toBeCloseTo(0.00205, 1);
});

it('From LumenMinute to LumenSecond and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = LuminousEnergy.LumenMinute.toLumenSecond(value)
            const convertBack = LuminousEnergy.LumenSecond.toLumenMinute(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known LumenMinute to LumenSecond', () => {
    expect(LuminousEnergy.LumenMinute.toLumenSecond(0.123)).toBeCloseTo(7.38, 1);
    expect(LuminousEnergy.LumenMinute.toLumenSecond(8000.0)).toBeCloseTo(480000.0, 1);
    expect(LuminousEnergy.LumenMinute.toLumenSecond(34.1)).toBeCloseTo(2046.0, 1);
});

it('From LumenSecond to Talbot and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = LuminousEnergy.LumenSecond.toTalbot(value)
            const convertBack = LuminousEnergy.Talbot.toLumenSecond(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known LumenSecond to Talbot', () => {
    expect(LuminousEnergy.LumenSecond.toTalbot(190.0)).toBeCloseTo(190.0, 1);
    expect(LuminousEnergy.LumenSecond.toTalbot(0.6)).toBeCloseTo(0.6, 1);
    expect(LuminousEnergy.LumenSecond.toTalbot(5000.0)).toBeCloseTo(5000.0, 1);
});

it('From LumenSecond to LumenHour and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = LuminousEnergy.LumenSecond.toLumenHour(value)
            const convertBack = LuminousEnergy.LumenHour.toLumenSecond(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known LumenSecond to LumenHour', () => {
    expect(LuminousEnergy.LumenSecond.toLumenHour(190.0)).toBeCloseTo(0.052778, 1);
    expect(LuminousEnergy.LumenSecond.toLumenHour(200600.0)).toBeCloseTo(55.7222, 1);
    expect(LuminousEnergy.LumenSecond.toLumenHour(1234.0)).toBeCloseTo(0.342778, 1);
});

it('From LumenSecond to LumenMinute and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = LuminousEnergy.LumenSecond.toLumenMinute(value)
            const convertBack = LuminousEnergy.LumenMinute.toLumenSecond(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known LumenSecond to LumenMinute', () => {
    expect(LuminousEnergy.LumenSecond.toLumenMinute(10900.0)).toBeCloseTo(181.6667, 1);
    expect(LuminousEnergy.LumenSecond.toLumenMinute(50.3)).toBeCloseTo(0.83833, 1);
    expect(LuminousEnergy.LumenSecond.toLumenMinute(276.0)).toBeCloseTo(4.6, 1);
});

it('From Talbot to LumenSecond and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = LuminousEnergy.Talbot.toLumenSecond(value)
            const convertBack = LuminousEnergy.LumenSecond.toTalbot(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Talbot to LumenSecond', () => {
    expect(LuminousEnergy.Talbot.toLumenSecond(100.0)).toBeCloseTo(100.0, 1);
    expect(LuminousEnergy.Talbot.toLumenSecond(0.9)).toBeCloseTo(0.9, 1);
    expect(LuminousEnergy.Talbot.toLumenSecond(23.1)).toBeCloseTo(23.1, 1);
});

it('From Talbot to LumenHour and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = LuminousEnergy.Talbot.toLumenHour(value)
            const convertBack = LuminousEnergy.LumenHour.toTalbot(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Talbot to LumenHour', () => {
    expect(LuminousEnergy.Talbot.toLumenHour(800.0)).toBeCloseTo(0.222, 1);
    expect(LuminousEnergy.Talbot.toLumenHour(6789.0)).toBeCloseTo(1.885833, 1);
    expect(LuminousEnergy.Talbot.toLumenHour(10900.0)).toBeCloseTo(3.027778, 1);
});

it('From Talbot to LumenMinute and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = LuminousEnergy.Talbot.toLumenMinute(value)
            const convertBack = LuminousEnergy.LumenMinute.toTalbot(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Talbot to LumenMinute', () => {
    expect(LuminousEnergy.Talbot.toLumenMinute(900.0)).toBeCloseTo(15.0, 1);
    expect(LuminousEnergy.Talbot.toLumenMinute(78.9)).toBeCloseTo(1.315, 1);
    expect(LuminousEnergy.Talbot.toLumenMinute(1500.0)).toBeCloseTo(25.0, 1);
});

