// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

import * as fc from 'fast-check';
import { DataStorage } from '../src/DataStorage';

it('From Bits to Kilobits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Bits.toKilobits(value)
            const convertBack = DataStorage.Kilobits.toBits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Bits to Kilobits', () => {
    expect(DataStorage.Bits.toKilobits(100.0)).toBeCloseTo(0.1, 1);
    expect(DataStorage.Bits.toKilobits(6021.0)).toBeCloseTo(6.021, 1);
    expect(DataStorage.Bits.toKilobits(9100.0)).toBeCloseTo(9.1, 1);
});

it('From Bits to Megabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Bits.toMegabits(value)
            const convertBack = DataStorage.Megabits.toBits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Bits to Megabits', () => {
    expect(DataStorage.Bits.toMegabits(9000000.0)).toBeCloseTo(9.0, 1);
    expect(DataStorage.Bits.toMegabits(123456.0)).toBeCloseTo(0.123456, 1);
    expect(DataStorage.Bits.toMegabits(1900000.0)).toBeCloseTo(1.9, 1);
});

it('From Bits to Gigabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Bits.toGigabits(value)
            const convertBack = DataStorage.Gigabits.toBits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Bits to Gigabits', () => {
    expect(DataStorage.Bits.toGigabits(190000000.0)).toBeCloseTo(0.19, 1);
    expect(DataStorage.Bits.toGigabits(8009.0)).toBeCloseTo(8.009e-6, 1);
    expect(DataStorage.Bits.toGigabits(987654321.0)).toBeCloseTo(0.987654321, 1);
});

it('From Bits to Terabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Bits.toTerabits(value)
            const convertBack = DataStorage.Terabits.toBits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Bits to Terabits', () => {
    expect(DataStorage.Bits.toTerabits(987654321234.0)).toBeCloseTo(0.987654321234, 1);
    expect(DataStorage.Bits.toTerabits(1234567890123456.0)).toBeCloseTo(1234.567890123455982, 1);
    expect(DataStorage.Bits.toTerabits(999888777666555.0)).toBeCloseTo(999.888777666555029, 1);
});

it('From Bits to Kilobytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Bits.toKilobytes(value)
            const convertBack = DataStorage.Kilobytes.toBits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Bits to Kilobytes', () => {
    expect(DataStorage.Bits.toKilobytes(900.0)).toBeCloseTo(0.1125, 1);
    expect(DataStorage.Bits.toKilobytes(12345.0)).toBeCloseTo(1.543125, 1);
    expect(DataStorage.Bits.toKilobytes(6000.9)).toBeCloseTo(0.7501125, 1);
});

it('From Bits to Megabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Bits.toMegabytes(value)
            const convertBack = DataStorage.Megabytes.toBits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Bits to Megabytes', () => {
    expect(DataStorage.Bits.toMegabytes(123456.0)).toBeCloseTo(0.015432, 1);
    expect(DataStorage.Bits.toMegabytes(900800.0)).toBeCloseTo(0.1126, 1);
    expect(DataStorage.Bits.toMegabytes(999888777.0)).toBeCloseTo(124.986097125, 1);
});

it('From Bits to Gigabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Bits.toGigabytes(value)
            const convertBack = DataStorage.Gigabytes.toBits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Bits to Gigabytes', () => {
    expect(DataStorage.Bits.toGigabytes(999888777.0)).toBeCloseTo(0.124986097125, 1);
    expect(DataStorage.Bits.toGigabytes(1.9e+9)).toBeCloseTo(0.2375, 1);
    expect(DataStorage.Bits.toGigabytes(80090077.0)).toBeCloseTo(0.010011259625, 1);
});

it('From Bits to Terabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Bits.toTerabytes(value)
            const convertBack = DataStorage.Terabytes.toBits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Bits to Terabytes', () => {
    expect(DataStorage.Bits.toTerabytes(999888777666.0)).toBeCloseTo(0.12498609720825, 1);
    expect(DataStorage.Bits.toTerabytes(12345678912345.0)).toBeCloseTo(1.5432098640431251, 1);
    expect(DataStorage.Bits.toTerabytes(111999222888333.0)).toBeCloseTo(13.9999028610416243, 1);
});

it('From Bits to Kibibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Bits.toKibibits(value)
            const convertBack = DataStorage.Kibibits.toBits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Bits to Kibibits', () => {
    expect(DataStorage.Bits.toKibibits(1800.0)).toBeCloseTo(1.757813, 1);
    expect(DataStorage.Bits.toKibibits(888.0)).toBeCloseTo(0.867188, 1);
    expect(DataStorage.Bits.toKibibits(7687.0)).toBeCloseTo(7.506836, 1);
});

it('From Bits to Mebibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Bits.toMebibits(value)
            const convertBack = DataStorage.Mebibits.toBits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Bits to Mebibits', () => {
    expect(DataStorage.Bits.toMebibits(999888.0)).toBeCloseTo(0.953567505, 1);
    expect(DataStorage.Bits.toMebibits(1234567.0)).toBeCloseTo(1.17737484, 1);
    expect(DataStorage.Bits.toMebibits(900800.0)).toBeCloseTo(0.859069824, 1);
});

it('From Gigabits to Bits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabits.toBits(value)
            const convertBack = DataStorage.Bits.toGigabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabits to Bits', () => {
    expect(DataStorage.Gigabits.toBits(0.0009)).toBeCloseTo(900000.0, 1);
    expect(DataStorage.Gigabits.toBits(0.00007)).toBeCloseTo(70000.0, 1);
    expect(DataStorage.Gigabits.toBits(1.2e-5)).toBeCloseTo(12000.0, 1);
});

it('From Gigabits to Kilobits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabits.toKilobits(value)
            const convertBack = DataStorage.Kilobits.toGigabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabits to Kilobits', () => {
    expect(DataStorage.Gigabits.toKilobits(0.01)).toBeCloseTo(10000.0, 1);
    expect(DataStorage.Gigabits.toKilobits(0.91)).toBeCloseTo(910000.0, 1);
    expect(DataStorage.Gigabits.toKilobits(6.1)).toBeCloseTo(6.1e+6, 1);
});

it('From Gigabits to Megabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabits.toMegabits(value)
            const convertBack = DataStorage.Megabits.toGigabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabits to Megabits', () => {
    expect(DataStorage.Gigabits.toMegabits(6.1)).toBeCloseTo(6100.0, 1);
    expect(DataStorage.Gigabits.toMegabits(0.961)).toBeCloseTo(961.0, 1);
    expect(DataStorage.Gigabits.toMegabits(1.2e-3)).toBeCloseTo(1.2, 1);
});

it('From Gigabits to Terabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabits.toTerabits(value)
            const convertBack = DataStorage.Terabits.toGigabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabits to Terabits', () => {
    expect(DataStorage.Gigabits.toTerabits(1200.0)).toBeCloseTo(1.2, 1);
    expect(DataStorage.Gigabits.toTerabits(90012.0)).toBeCloseTo(90.012, 1);
    expect(DataStorage.Gigabits.toTerabits(8000.0)).toBeCloseTo(8.0, 1);
});

it('From Gigabits to Kilobytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabits.toKilobytes(value)
            const convertBack = DataStorage.Kilobytes.toGigabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabits to Kilobytes', () => {
    expect(DataStorage.Gigabits.toKilobytes(1.2)).toBeCloseTo(150000.0, 1);
    expect(DataStorage.Gigabits.toKilobytes(0.9)).toBeCloseTo(112500.0, 1);
    expect(DataStorage.Gigabits.toKilobytes(0.001)).toBeCloseTo(125.0, 1);
});

it('From Gigabits to Megabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabits.toMegabytes(value)
            const convertBack = DataStorage.Megabytes.toGigabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabits to Megabytes', () => {
    expect(DataStorage.Gigabits.toMegabytes(0.9)).toBeCloseTo(112.5, 1);
    expect(DataStorage.Gigabits.toMegabytes(1.2)).toBeCloseTo(150.0, 1);
    expect(DataStorage.Gigabits.toMegabytes(80.1)).toBeCloseTo(10012.5, 1);
});

it('From Gigabits to Gigabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabits.toGigabytes(value)
            const convertBack = DataStorage.Gigabytes.toGigabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabits to Gigabytes', () => {
    expect(DataStorage.Gigabits.toGigabytes(99.0)).toBeCloseTo(12.375, 1);
    expect(DataStorage.Gigabits.toGigabytes(123.123)).toBeCloseTo(15.390375, 1);
    expect(DataStorage.Gigabits.toGigabytes(8000.9)).toBeCloseTo(1000.1125, 1);
});

it('From Gigabits to Terabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabits.toTerabytes(value)
            const convertBack = DataStorage.Terabytes.toGigabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabits to Terabytes', () => {
    expect(DataStorage.Gigabits.toTerabytes(9000.0)).toBeCloseTo(1.125, 1);
    expect(DataStorage.Gigabits.toTerabytes(1234567.0)).toBeCloseTo(154.320875, 1);
    expect(DataStorage.Gigabits.toTerabytes(613.0)).toBeCloseTo(0.076625, 1);
});

it('From Gigabits to Kibibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabits.toKibibits(value)
            const convertBack = DataStorage.Kibibits.toGigabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabits to Kibibits', () => {
    expect(DataStorage.Gigabits.toKibibits(0.8)).toBeCloseTo(781250.4, 1);
    expect(DataStorage.Gigabits.toKibibits(0.012)).toBeCloseTo(11718.75, 1);
    expect(DataStorage.Gigabits.toKibibits(0.002)).toBeCloseTo(1953.125, 1);
});

it('From Gigabits to Mebibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabits.toMebibits(value)
            const convertBack = DataStorage.Mebibits.toGigabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabits to Mebibits', () => {
    expect(DataStorage.Gigabits.toMebibits(0.002)).toBeCloseTo(1.9073486, 1);
    expect(DataStorage.Gigabits.toMebibits(0.9)).toBeCloseTo(858.6, 1);
    expect(DataStorage.Gigabits.toMebibits(6.1)).toBeCloseTo(5819.4, 1);
});

it('From Gigabytes to Bits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabytes.toBits(value)
            const convertBack = DataStorage.Bits.toGigabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabytes to Bits', () => {
    expect(DataStorage.Gigabytes.toBits(0.004)).toBeCloseTo(32000000.0, 1);
    expect(DataStorage.Gigabytes.toBits(0.012)).toBeCloseTo(96000000, 1);
    expect(DataStorage.Gigabytes.toBits(3e-9)).toBeCloseTo(24.0, 1);
});

it('From Gigabytes to Kilobits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabytes.toKilobits(value)
            const convertBack = DataStorage.Kilobits.toGigabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabytes to Kilobits', () => {
    expect(DataStorage.Gigabytes.toKilobits(0.009)).toBeCloseTo(72000.0, 1);
    expect(DataStorage.Gigabytes.toKilobits(1.2e-4)).toBeCloseTo(960.0, 1);
    expect(DataStorage.Gigabytes.toKilobits(0.0078)).toBeCloseTo(62400.0, 1);
});

it('From Gigabytes to Megabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabytes.toMegabits(value)
            const convertBack = DataStorage.Megabits.toGigabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabytes to Megabits', () => {
    expect(DataStorage.Gigabytes.toMegabits(0.0078)).toBeCloseTo(62.4, 1);
    expect(DataStorage.Gigabytes.toMegabits(0.01)).toBeCloseTo(80.0, 1);
    expect(DataStorage.Gigabytes.toMegabits(0.001234)).toBeCloseTo(9.872, 1);
});

it('From Gigabytes to Gigabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabytes.toGigabits(value)
            const convertBack = DataStorage.Gigabits.toGigabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabytes to Gigabits', () => {
    expect(DataStorage.Gigabytes.toGigabits(5.0)).toBeCloseTo(40.0, 1);
    expect(DataStorage.Gigabytes.toGigabits(1.2)).toBeCloseTo(9.6, 1);
    expect(DataStorage.Gigabytes.toGigabits(0.01)).toBeCloseTo(0.08, 1);
});

it('From Gigabytes to Terabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabytes.toTerabits(value)
            const convertBack = DataStorage.Terabits.toGigabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabytes to Terabits', () => {
    expect(DataStorage.Gigabytes.toTerabits(70.0)).toBeCloseTo(0.56, 1);
    expect(DataStorage.Gigabytes.toTerabits(9001.0)).toBeCloseTo(72.008, 1);
    expect(DataStorage.Gigabytes.toTerabits(768123.9)).toBeCloseTo(6144.9912, 1);
});

it('From Gigabytes to Kilobytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabytes.toKilobytes(value)
            const convertBack = DataStorage.Kilobytes.toGigabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabytes to Kilobytes', () => {
    expect(DataStorage.Gigabytes.toKilobytes(0.2)).toBeCloseTo(200000.0, 1);
    expect(DataStorage.Gigabytes.toKilobytes(0.009)).toBeCloseTo(9000.0, 1);
    expect(DataStorage.Gigabytes.toKilobytes(0.00123)).toBeCloseTo(1230.0, 1);
});

it('From Gigabytes to Megabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabytes.toMegabytes(value)
            const convertBack = DataStorage.Megabytes.toGigabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabytes to Megabytes', () => {
    expect(DataStorage.Gigabytes.toMegabytes(0.9)).toBeCloseTo(900.0, 1);
    expect(DataStorage.Gigabytes.toMegabytes(12.0)).toBeCloseTo(12000.0, 1);
    expect(DataStorage.Gigabytes.toMegabytes(35.6)).toBeCloseTo(35600.0, 1);
});

it('From Gigabytes to Terabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabytes.toTerabytes(value)
            const convertBack = DataStorage.Terabytes.toGigabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabytes to Terabytes', () => {
    expect(DataStorage.Gigabytes.toTerabytes(35.6)).toBeCloseTo(0.0356, 1);
    expect(DataStorage.Gigabytes.toTerabytes(100.23)).toBeCloseTo(0.10023, 1);
    expect(DataStorage.Gigabytes.toTerabytes(900100.0)).toBeCloseTo(900.1, 1);
});

it('From Gigabytes to Kibibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabytes.toKibibits(value)
            const convertBack = DataStorage.Kibibits.toGigabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabytes to Kibibits', () => {
    expect(DataStorage.Gigabytes.toKibibits(0.05)).toBeCloseTo(390625.0, 1);
    expect(DataStorage.Gigabytes.toKibibits(0.008)).toBeCloseTo(62500.0, 1);
    expect(DataStorage.Gigabytes.toKibibits(0.00123)).toBeCloseTo(9609.375, 1);
});

it('From Gigabytes to Mebibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Gigabytes.toMebibits(value)
            const convertBack = DataStorage.Mebibits.toGigabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Gigabytes to Mebibits', () => {
    expect(DataStorage.Gigabytes.toMebibits(0.009)).toBeCloseTo(68.66451, 1);
    expect(DataStorage.Gigabytes.toMebibits(1.2)).toBeCloseTo(9155.268, 1);
    expect(DataStorage.Gigabytes.toMebibits(19.2)).toBeCloseTo(146484.288, 1);
});

it('From Kibibits to Bits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kibibits.toBits(value)
            const convertBack = DataStorage.Bits.toKibibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kibibits to Bits', () => {
    expect(DataStorage.Kibibits.toBits(2.0)).toBeCloseTo(2048.0, 1);
    expect(DataStorage.Kibibits.toBits(9.0)).toBeCloseTo(9216.0, 1);
    expect(DataStorage.Kibibits.toBits(17.8)).toBeCloseTo(18227.2, 1);
});

it('From Kibibits to Kilobits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kibibits.toKilobits(value)
            const convertBack = DataStorage.Kilobits.toKibibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kibibits to Kilobits', () => {
    expect(DataStorage.Kibibits.toKilobits(6.2)).toBeCloseTo(6.3488, 1);
    expect(DataStorage.Kibibits.toKilobits(0.9)).toBeCloseTo(0.9216, 1);
    expect(DataStorage.Kibibits.toKilobits(87.0)).toBeCloseTo(89.088, 1);
});

it('From Kibibits to Megabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kibibits.toMegabits(value)
            const convertBack = DataStorage.Megabits.toKibibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kibibits to Megabits', () => {
    expect(DataStorage.Kibibits.toMegabits(87.0)).toBeCloseTo(0.089088, 1);
    expect(DataStorage.Kibibits.toMegabits(12.34)).toBeCloseTo(0.01263616, 1);
    expect(DataStorage.Kibibits.toMegabits(123456.0)).toBeCloseTo(126.418879, 1);
});

it('From Kibibits to Gigabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kibibits.toGigabits(value)
            const convertBack = DataStorage.Gigabits.toKibibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kibibits to Gigabits', () => {
    expect(DataStorage.Kibibits.toGigabits(123456.0)).toBeCloseTo(0.126418944, 1);
    expect(DataStorage.Kibibits.toGigabits(8000000.0)).toBeCloseTo(8.192, 1);
    expect(DataStorage.Kibibits.toGigabits(1276876)).toBeCloseTo(1.307521024, 1);
});

it('From Kibibits to Terabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kibibits.toTerabits(value)
            const convertBack = DataStorage.Terabits.toKibibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kibibits to Terabits', () => {
    expect(DataStorage.Kibibits.toTerabits(800000000.0)).toBeCloseTo(0.8192, 1);
    expect(DataStorage.Kibibits.toTerabits(1.5e12)).toBeCloseTo(1536.0, 1);
    expect(DataStorage.Kibibits.toTerabits(9999999.0)).toBeCloseTo(0.01023999898, 1);
});

it('From Kibibits to Kilobytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kibibits.toKilobytes(value)
            const convertBack = DataStorage.Kilobytes.toKibibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kibibits to Kilobytes', () => {
    expect(DataStorage.Kibibits.toKilobytes(919.0)).toBeCloseTo(117.632, 1);
    expect(DataStorage.Kibibits.toKilobytes(77.4)).toBeCloseTo(9.9072, 1);
    expect(DataStorage.Kibibits.toKilobytes(109.109)).toBeCloseTo(13.965952, 1);
});

it('From Kibibits to Megabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kibibits.toMegabytes(value)
            const convertBack = DataStorage.Megabytes.toKibibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kibibits to Megabytes', () => {
    expect(DataStorage.Kibibits.toMegabytes(1000.0)).toBeCloseTo(0.128, 1);
    expect(DataStorage.Kibibits.toMegabytes(800.123)).toBeCloseTo(0.102415744, 1);
    expect(DataStorage.Kibibits.toMegabytes(123456.0)).toBeCloseTo(15.802368, 1);
});

it('From Kibibits to Gigabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kibibits.toGigabytes(value)
            const convertBack = DataStorage.Gigabytes.toKibibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kibibits to Gigabytes', () => {
    expect(DataStorage.Kibibits.toGigabytes(12345678.0)).toBeCloseTo(1.580347926, 1);
    expect(DataStorage.Kibibits.toGigabytes(8e12)).toBeCloseTo(1024000.00, 1);
    expect(DataStorage.Kibibits.toGigabytes(1.2e5)).toBeCloseTo(0.01536, 1);
});

it('From Kibibits to Terabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kibibits.toTerabytes(value)
            const convertBack = DataStorage.Terabytes.toKibibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kibibits to Terabytes', () => {
    expect(DataStorage.Kibibits.toTerabytes(120000000.0)).toBeCloseTo(0.01536, 1);
    expect(DataStorage.Kibibits.toTerabytes(88e12)).toBeCloseTo(11264.0, 1);
    expect(DataStorage.Kibibits.toTerabytes(9000000.0)).toBeCloseTo(0.009216, 1);
});

it('From Kibibits to Mebibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kibibits.toMebibits(value)
            const convertBack = DataStorage.Mebibits.toKibibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kibibits to Mebibits', () => {
    expect(DataStorage.Kibibits.toMebibits(600.0)).toBeCloseTo(0.5859375, 1);
    expect(DataStorage.Kibibits.toMebibits(12345.0)).toBeCloseTo(12.055664, 1);
    expect(DataStorage.Kibibits.toMebibits(101.0)).toBeCloseTo(0.0986328, 1);
});

it('From Kilobits to Bits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobits.toBits(value)
            const convertBack = DataStorage.Bits.toKilobits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobits to Bits', () => {
    expect(DataStorage.Kilobits.toBits(9.0)).toBeCloseTo(9000.0, 1);
    expect(DataStorage.Kilobits.toBits(6.7)).toBeCloseTo(6700.0, 1);
    expect(DataStorage.Kilobits.toBits(1.2345)).toBeCloseTo(1234.5, 1);
});

it('From Kilobits to Megabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobits.toMegabits(value)
            const convertBack = DataStorage.Megabits.toKilobits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobits to Megabits', () => {
    expect(DataStorage.Kilobits.toMegabits(900.0)).toBeCloseTo(0.9, 1);
    expect(DataStorage.Kilobits.toMegabits(12345.0)).toBeCloseTo(12.345, 1);
    expect(DataStorage.Kilobits.toMegabits(9988.0)).toBeCloseTo(9.988, 1);
});

it('From Kilobits to Gigabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobits.toGigabits(value)
            const convertBack = DataStorage.Gigabits.toKilobits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobits to Gigabits', () => {
    expect(DataStorage.Kilobits.toGigabits(123456.0)).toBeCloseTo(0.123456, 1);
    expect(DataStorage.Kilobits.toGigabits(8000700.0)).toBeCloseTo(8.0007, 1);
    expect(DataStorage.Kilobits.toGigabits(191987578.0)).toBeCloseTo(191.987578, 1);
});

it('From Kilobits to Terabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobits.toTerabits(value)
            const convertBack = DataStorage.Terabits.toKilobits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobits to Terabits', () => {
    expect(DataStorage.Kilobits.toTerabits(191987578)).toBeCloseTo(0.191987578, 1);
    expect(DataStorage.Kilobits.toTerabits(9010081903.0)).toBeCloseTo(9.010081903, 1);
    expect(DataStorage.Kilobits.toTerabits(123456789.0)).toBeCloseTo(0.123456789, 1);
});

it('From Kilobits to Kilobytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobits.toKilobytes(value)
            const convertBack = DataStorage.Kilobytes.toKilobits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobits to Kilobytes', () => {
    expect(DataStorage.Kilobits.toKilobytes(80.0)).toBeCloseTo(10.0, 1);
    expect(DataStorage.Kilobits.toKilobytes(15.67)).toBeCloseTo(1.95875, 1);
    expect(DataStorage.Kilobits.toKilobytes(8007.09)).toBeCloseTo(1000.88625, 1);
});

it('From Kilobits to Megabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobits.toMegabytes(value)
            const convertBack = DataStorage.Megabytes.toKilobits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobits to Megabytes', () => {
    expect(DataStorage.Kilobits.toMegabytes(123456.0)).toBeCloseTo(15.432, 1);
    expect(DataStorage.Kilobits.toMegabytes(998877.0)).toBeCloseTo(124.859625, 1);
    expect(DataStorage.Kilobits.toMegabytes(10090.0)).toBeCloseTo(1.26125, 1);
});

it('From Kilobits to Gigabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobits.toGigabytes(value)
            const convertBack = DataStorage.Gigabytes.toKilobits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobits to Gigabytes', () => {
    expect(DataStorage.Kilobits.toGigabytes(1828972.0)).toBeCloseTo(0.2286215, 1);
    expect(DataStorage.Kilobits.toGigabytes(879860.8)).toBeCloseTo(0.1099826, 1);
    expect(DataStorage.Kilobits.toGigabytes(78178971.0)).toBeCloseTo(9.772371375, 1);
});

it('From Kilobits to Terabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobits.toTerabytes(value)
            const convertBack = DataStorage.Terabytes.toKilobits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobits to Terabytes', () => {
    expect(DataStorage.Kilobits.toTerabytes(1234567891.0)).toBeCloseTo(0.154320986375, 1);
    expect(DataStorage.Kilobits.toTerabytes(999999098.0)).toBeCloseTo(0.12499988725, 1);
    expect(DataStorage.Kilobits.toTerabytes(84618364142.0)).toBeCloseTo(10.57729551775, 1);
});

it('From Kilobits to Kibibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobits.toKibibits(value)
            const convertBack = DataStorage.Kibibits.toKilobits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobits to Kibibits', () => {
    expect(DataStorage.Kilobits.toKibibits(89.1)).toBeCloseTo(87.01172, 1);
    expect(DataStorage.Kilobits.toKibibits(7.1)).toBeCloseTo(6.93359, 1);
    expect(DataStorage.Kilobits.toKibibits(438.0)).toBeCloseTo(427.734, 1);
});

it('From Kilobits to Mebibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobits.toMebibits(value)
            const convertBack = DataStorage.Mebibits.toKilobits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobits to Mebibits', () => {
    expect(DataStorage.Kilobits.toMebibits(77790.0)).toBeCloseTo(74.186325, 1);
    expect(DataStorage.Kilobits.toMebibits(123456.0)).toBeCloseTo(117.736816, 1);
    expect(DataStorage.Kilobits.toMebibits(23972.0)).toBeCloseTo(22.861481, 1);
});

it('From Kilobytes to Bits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobytes.toBits(value)
            const convertBack = DataStorage.Bits.toKilobytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobytes to Bits', () => {
    expect(DataStorage.Kilobytes.toBits(123.456)).toBeCloseTo(987648.0, 1);
    expect(DataStorage.Kilobytes.toBits(900.0)).toBeCloseTo(7.2e+6, 1);
    expect(DataStorage.Kilobytes.toBits(100200.0)).toBeCloseTo(801600000, 1);
});

it('From Kilobytes to Kilobits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobytes.toKilobits(value)
            const convertBack = DataStorage.Kilobits.toKilobytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobytes to Kilobits', () => {
    expect(DataStorage.Kilobytes.toKilobits(4.0)).toBeCloseTo(32.0, 1);
    expect(DataStorage.Kilobytes.toKilobits(1.2)).toBeCloseTo(9.6, 1);
    expect(DataStorage.Kilobytes.toKilobits(88.1)).toBeCloseTo(704.8, 1);
});

it('From Kilobytes to Megabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobytes.toMegabits(value)
            const convertBack = DataStorage.Megabits.toKilobytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobytes to Megabits', () => {
    expect(DataStorage.Kilobytes.toMegabits(88.1)).toBeCloseTo(0.7048, 1);
    expect(DataStorage.Kilobytes.toMegabits(7.1)).toBeCloseTo(0.0568, 1);
    expect(DataStorage.Kilobytes.toMegabits(12.8)).toBeCloseTo(0.1024, 1);
});

it('From Kilobytes to Gigabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobytes.toGigabits(value)
            const convertBack = DataStorage.Gigabits.toKilobytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobytes to Gigabits', () => {
    expect(DataStorage.Kilobytes.toGigabits(10080.0)).toBeCloseTo(0.08064, 1);
    expect(DataStorage.Kilobytes.toGigabits(4.5e+9)).toBeCloseTo(36000.0, 1);
    expect(DataStorage.Kilobytes.toGigabits(271279.0)).toBeCloseTo(2.170232, 1);
});

it('From Kilobytes to Terabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobytes.toTerabits(value)
            const convertBack = DataStorage.Terabits.toKilobytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobytes to Terabits', () => {
    expect(DataStorage.Kilobytes.toTerabits(9009000.0)).toBeCloseTo(0.072072, 1);
    expect(DataStorage.Kilobytes.toTerabits(7.2e9)).toBeCloseTo(57.6, 1);
    expect(DataStorage.Kilobytes.toTerabits(100100100900.0)).toBeCloseTo(800.8008072, 1);
});

it('From Kilobytes to Megabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobytes.toMegabytes(value)
            const convertBack = DataStorage.Megabytes.toKilobytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobytes to Megabytes', () => {
    expect(DataStorage.Kilobytes.toMegabytes(1009.0)).toBeCloseTo(1.009, 1);
    expect(DataStorage.Kilobytes.toMegabytes(8899.0)).toBeCloseTo(8.899, 1);
    expect(DataStorage.Kilobytes.toMegabytes(619.0)).toBeCloseTo(0.619, 1);
});

it('From Kilobytes to Gigabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobytes.toGigabytes(value)
            const convertBack = DataStorage.Gigabytes.toKilobytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobytes to Gigabytes', () => {
    expect(DataStorage.Kilobytes.toGigabytes(900800.0)).toBeCloseTo(0.9008, 1);
    expect(DataStorage.Kilobytes.toGigabytes(1234567.0)).toBeCloseTo(1.234567, 1);
    expect(DataStorage.Kilobytes.toGigabytes(7.9e9)).toBeCloseTo(7900.0, 1);
});

it('From Kilobytes to Terabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobytes.toTerabytes(value)
            const convertBack = DataStorage.Terabytes.toKilobytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobytes to Terabytes', () => {
    expect(DataStorage.Kilobytes.toTerabytes(0.9)).toBeCloseTo(9e-10, 1);
    expect(DataStorage.Kilobytes.toTerabytes(140000000)).toBeCloseTo(0.14, 1);
    expect(DataStorage.Kilobytes.toTerabytes(7.0)).toBeCloseTo(7e-9, 1);
});

it('From Kilobytes to Kibibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobytes.toKibibits(value)
            const convertBack = DataStorage.Kibibits.toKilobytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobytes to Kibibits', () => {
    expect(DataStorage.Kilobytes.toKibibits(0.009)).toBeCloseTo(0.0703125, 1);
    expect(DataStorage.Kilobytes.toKibibits(6e+3)).toBeCloseTo(46872.0, 1);
    expect(DataStorage.Kilobytes.toKibibits(1.23)).toBeCloseTo(9.609375, 1);
});

it('From Kilobytes to Mebibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Kilobytes.toMebibits(value)
            const convertBack = DataStorage.Mebibits.toKilobytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kilobytes to Mebibits', () => {
    expect(DataStorage.Kilobytes.toMebibits(70.0)).toBeCloseTo(0.534058, 1);
    expect(DataStorage.Kilobytes.toMebibits(9.0)).toBeCloseTo(0.0686646, 1);
    expect(DataStorage.Kilobytes.toMebibits(10022.0)).toBeCloseTo(76.461792, 1);
});

it('From Mebibits to Bits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Mebibits.toBits(value)
            const convertBack = DataStorage.Bits.toMebibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Mebibits to Bits', () => {
    expect(DataStorage.Mebibits.toBits(0.9)).toBeCloseTo(943718.4, 1);
    expect(DataStorage.Mebibits.toBits(0.006)).toBeCloseTo(6291.456, 1);
    expect(DataStorage.Mebibits.toBits(2.0)).toBeCloseTo(2097152.0, 1);
});

it('From Mebibits to Kilobits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Mebibits.toKilobits(value)
            const convertBack = DataStorage.Kilobits.toMebibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Mebibits to Kilobits', () => {
    expect(DataStorage.Mebibits.toKilobits(0.8)).toBeCloseTo(838.861, 1);
    expect(DataStorage.Mebibits.toKilobits(2.0)).toBeCloseTo(2097.15, 1);
    expect(DataStorage.Mebibits.toKilobits(0.23)).toBeCloseTo(241.1725, 1);
});

it('From Mebibits to Megabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Mebibits.toMegabits(value)
            const convertBack = DataStorage.Megabits.toMebibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Mebibits to Megabits', () => {
    expect(DataStorage.Mebibits.toMegabits(0.9)).toBeCloseTo(0.943718, 1);
    expect(DataStorage.Mebibits.toMegabits(12.3)).toBeCloseTo(12.89748, 1);
    expect(DataStorage.Mebibits.toMegabits(8.1)).toBeCloseTo(8.49347, 1);
});

it('From Mebibits to Gigabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Mebibits.toGigabits(value)
            const convertBack = DataStorage.Gigabits.toMebibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Mebibits to Gigabits', () => {
    expect(DataStorage.Mebibits.toGigabits(12345.0)).toBeCloseTo(12.944671, 1);
    expect(DataStorage.Mebibits.toGigabits(100.0)).toBeCloseTo(0.104858, 1);
    expect(DataStorage.Mebibits.toGigabits(999.9)).toBeCloseTo(1.0484711, 1);
});

it('From Mebibits to Terabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Mebibits.toTerabits(value)
            const convertBack = DataStorage.Terabits.toMebibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Mebibits to Terabits', () => {
    expect(DataStorage.Mebibits.toTerabits(100009.0)).toBeCloseTo(0.104867037, 1);
    expect(DataStorage.Mebibits.toTerabits(9876543.0)).toBeCloseTo(10.35630595, 1);
    expect(DataStorage.Mebibits.toTerabits(1000900.0)).toBeCloseTo(1.049519718, 1);
});

it('From Mebibits to Kilobytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Mebibits.toKilobytes(value)
            const convertBack = DataStorage.Kilobytes.toMebibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Mebibits to Kilobytes', () => {
    expect(DataStorage.Mebibits.toKilobytes(4.0)).toBeCloseTo(524.288, 1);
    expect(DataStorage.Mebibits.toKilobytes(1.45)).toBeCloseTo(190.0544, 1);
    expect(DataStorage.Mebibits.toKilobytes(88.11)).toBeCloseTo(11548.754, 1);
});

it('From Mebibits to Megabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Mebibits.toMegabytes(value)
            const convertBack = DataStorage.Megabytes.toMebibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Mebibits to Megabytes', () => {
    expect(DataStorage.Mebibits.toMegabytes(109.0)).toBeCloseTo(14.2868, 1);
    expect(DataStorage.Mebibits.toMegabytes(55.67)).toBeCloseTo(7.2967782, 1);
    expect(DataStorage.Mebibits.toMegabytes(45678.0)).toBeCloseTo(5987.1068, 1);
});

it('From Mebibits to Gigabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Mebibits.toGigabytes(value)
            const convertBack = DataStorage.Gigabytes.toMebibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Mebibits to Gigabytes', () => {
    expect(DataStorage.Mebibits.toGigabytes(4000.0)).toBeCloseTo(0.524288311, 1);
    expect(DataStorage.Mebibits.toGigabytes(90100.0)).toBeCloseTo(11.80959421, 1);
    expect(DataStorage.Mebibits.toGigabytes(1009.0)).toBeCloseTo(0.132251727, 1);
});

it('From Mebibits to Terabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Mebibits.toTerabytes(value)
            const convertBack = DataStorage.Terabytes.toMebibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Mebibits to Terabytes', () => {
    expect(DataStorage.Mebibits.toTerabytes(1000009.0)).toBeCloseTo(0.1310731796, 1);
    expect(DataStorage.Mebibits.toTerabytes(90808080.0)).toBeCloseTo(11.902396662, 1);
    expect(DataStorage.Mebibits.toTerabytes(5.2e12)).toBeCloseTo(681574.4, 1);
});

it('From Mebibits to Kibibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Mebibits.toKibibits(value)
            const convertBack = DataStorage.Kibibits.toMebibits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Mebibits to Kibibits', () => {
    expect(DataStorage.Mebibits.toKibibits(5.0)).toBeCloseTo(5120.0, 1);
    expect(DataStorage.Mebibits.toKibibits(1234.56)).toBeCloseTo(1264189.44, 1);
    expect(DataStorage.Mebibits.toKibibits(505.0)).toBeCloseTo(517120.0, 1);
});

it('From Megabits to Bits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabits.toBits(value)
            const convertBack = DataStorage.Bits.toMegabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabits to Bits', () => {
    expect(DataStorage.Megabits.toBits(0.34)).toBeCloseTo(340000.0, 1);
    expect(DataStorage.Megabits.toBits(9.12)).toBeCloseTo(9120000.0, 1);
    expect(DataStorage.Megabits.toBits(0.987)).toBeCloseTo(987000.0, 1);
});

it('From Megabits to Kilobits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabits.toKilobits(value)
            const convertBack = DataStorage.Kilobits.toMegabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabits to Kilobits', () => {
    expect(DataStorage.Megabits.toKilobits(0.77)).toBeCloseTo(770.0, 1);
    expect(DataStorage.Megabits.toKilobits(5.0)).toBeCloseTo(5000.0, 1);
    expect(DataStorage.Megabits.toKilobits(0.987)).toBeCloseTo(987.0, 1);
});

it('From Megabits to Gigabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabits.toGigabits(value)
            const convertBack = DataStorage.Gigabits.toMegabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabits to Gigabits', () => {
    expect(DataStorage.Megabits.toGigabits(900.0)).toBeCloseTo(0.9, 1);
    expect(DataStorage.Megabits.toGigabits(12345.0)).toBeCloseTo(12.345, 1);
    expect(DataStorage.Megabits.toGigabits(189.1)).toBeCloseTo(0.1891, 1);
});

it('From Megabits to Terabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabits.toTerabits(value)
            const convertBack = DataStorage.Terabits.toMegabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabits to Terabits', () => {
    expect(DataStorage.Megabits.toTerabits(100200300.0)).toBeCloseTo(100.2003, 1);
    expect(DataStorage.Megabits.toTerabits(99887777.0)).toBeCloseTo(99.887777, 1);
    expect(DataStorage.Megabits.toTerabits(80009.0)).toBeCloseTo(0.080009, 1);
});

it('From Megabits to Kilobytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabits.toKilobytes(value)
            const convertBack = DataStorage.Kilobytes.toMegabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabits to Kilobytes', () => {
    expect(DataStorage.Megabits.toKilobytes(9.0)).toBeCloseTo(1125.0, 1);
    expect(DataStorage.Megabits.toKilobytes(1.23)).toBeCloseTo(153.75, 1);
    expect(DataStorage.Megabits.toKilobytes(98.1)).toBeCloseTo(12262.5, 1);
});

it('From Megabits to Megabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabits.toMegabytes(value)
            const convertBack = DataStorage.Megabytes.toMegabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabits to Megabytes', () => {
    expect(DataStorage.Megabits.toMegabytes(98.1)).toBeCloseTo(12.2625, 1);
    expect(DataStorage.Megabits.toMegabytes(10.9)).toBeCloseTo(1.3625, 1);
    expect(DataStorage.Megabits.toMegabytes(888.123)).toBeCloseTo(111.015375, 1);
});

it('From Megabits to Gigabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabits.toGigabytes(value)
            const convertBack = DataStorage.Gigabytes.toMegabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabits to Gigabytes', () => {
    expect(DataStorage.Megabits.toGigabytes(900.0)).toBeCloseTo(0.1125, 1);
    expect(DataStorage.Megabits.toGigabytes(10123.0)).toBeCloseTo(1.265375, 1);
    expect(DataStorage.Megabits.toGigabytes(9988.0)).toBeCloseTo(1.2485, 1);
});

it('From Megabits to Terabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabits.toTerabytes(value)
            const convertBack = DataStorage.Terabytes.toMegabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabits to Terabytes', () => {
    expect(DataStorage.Megabits.toTerabytes(998877.0)).toBeCloseTo(0.124859625, 1);
    expect(DataStorage.Megabits.toTerabytes(100200400.0)).toBeCloseTo(12.5250375, 1);
    expect(DataStorage.Megabits.toTerabytes(9008877.0)).toBeCloseTo(1.126109625, 1);
});

it('From Megabits to Kibibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabits.toKibibits(value)
            const convertBack = DataStorage.Kibibits.toMegabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabits to Kibibits', () => {
    expect(DataStorage.Megabits.toKibibits(12.0)).toBeCloseTo(11718.756, 1);
    expect(DataStorage.Megabits.toKibibits(0.9)).toBeCloseTo(878.906, 1);
    expect(DataStorage.Megabits.toKibibits(1.23)).toBeCloseTo(1201.172, 1);
});

it('From Megabits to Mebibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabits.toMebibits(value)
            const convertBack = DataStorage.Mebibits.toMegabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabits to Mebibits', () => {
    expect(DataStorage.Megabits.toMebibits(4.5)).toBeCloseTo(4.29153, 1);
    expect(DataStorage.Megabits.toMebibits(0.8)).toBeCloseTo(0.762939, 1);
    expect(DataStorage.Megabits.toMebibits(900.0)).toBeCloseTo(858.307, 1);
});

it('From Megabytes to Bits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabytes.toBits(value)
            const convertBack = DataStorage.Bits.toMegabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabytes to Bits', () => {
    expect(DataStorage.Megabytes.toBits(0.04)).toBeCloseTo(320000.0, 1);
    expect(DataStorage.Megabytes.toBits(0.0091)).toBeCloseTo(72800.0, 1);
    expect(DataStorage.Megabytes.toBits(3e-5)).toBeCloseTo(240.0, 1);
});

it('From Megabytes to Kilobits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabytes.toKilobits(value)
            const convertBack = DataStorage.Kilobits.toMegabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabytes to Kilobits', () => {
    expect(DataStorage.Megabytes.toKilobits(6.0)).toBeCloseTo(48000.0, 1);
    expect(DataStorage.Megabytes.toKilobits(0.3)).toBeCloseTo(2400.0, 1);
    expect(DataStorage.Megabytes.toKilobits(0.009)).toBeCloseTo(72.0, 1);
});

it('From Megabytes to Megabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabytes.toMegabits(value)
            const convertBack = DataStorage.Megabits.toMegabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabytes to Megabits', () => {
    expect(DataStorage.Megabytes.toMegabits(3.0)).toBeCloseTo(24.0, 1);
    expect(DataStorage.Megabytes.toMegabits(0.9)).toBeCloseTo(7.2, 1);
    expect(DataStorage.Megabytes.toMegabits(13.0)).toBeCloseTo(104.0, 1);
});

it('From Megabytes to Gigabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabytes.toGigabits(value)
            const convertBack = DataStorage.Gigabits.toMegabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabytes to Gigabits', () => {
    expect(DataStorage.Megabytes.toGigabits(13.0)).toBeCloseTo(0.104, 1);
    expect(DataStorage.Megabytes.toGigabits(900.0)).toBeCloseTo(7.2, 1);
    expect(DataStorage.Megabytes.toGigabits(18000.0)).toBeCloseTo(144.0, 1);
});

it('From Megabytes to Terabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabytes.toTerabits(value)
            const convertBack = DataStorage.Terabits.toMegabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabytes to Terabits', () => {
    expect(DataStorage.Megabytes.toTerabits(18000.0)).toBeCloseTo(0.144, 1);
    expect(DataStorage.Megabytes.toTerabits(9718290.0)).toBeCloseTo(77.74632, 1);
    expect(DataStorage.Megabytes.toTerabits(9e12)).toBeCloseTo(72000000.0, 1);
});

it('From Megabytes to Kilobytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabytes.toKilobytes(value)
            const convertBack = DataStorage.Kilobytes.toMegabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabytes to Kilobytes', () => {
    expect(DataStorage.Megabytes.toKilobytes(6.0)).toBeCloseTo(6000.0, 1);
    expect(DataStorage.Megabytes.toKilobytes(0.9)).toBeCloseTo(900.0, 1);
    expect(DataStorage.Megabytes.toKilobytes(123.4)).toBeCloseTo(123400.0, 1);
});

it('From Megabytes to Gigabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabytes.toGigabytes(value)
            const convertBack = DataStorage.Gigabytes.toMegabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabytes to Gigabytes', () => {
    expect(DataStorage.Megabytes.toGigabytes(123.4)).toBeCloseTo(0.1234, 1);
    expect(DataStorage.Megabytes.toGigabytes(900.0)).toBeCloseTo(0.9, 1);
    expect(DataStorage.Megabytes.toGigabytes(8e6)).toBeCloseTo(8000.0, 1);
});

it('From Megabytes to Terabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabytes.toTerabytes(value)
            const convertBack = DataStorage.Terabytes.toMegabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabytes to Terabytes', () => {
    expect(DataStorage.Megabytes.toTerabytes(80000.0)).toBeCloseTo(0.08, 1);
    expect(DataStorage.Megabytes.toTerabytes(12345678.0)).toBeCloseTo(12.345678, 1);
    expect(DataStorage.Megabytes.toTerabytes(900800.0)).toBeCloseTo(0.9008, 1);
});

it('From Megabytes to Kibibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabytes.toKibibits(value)
            const convertBack = DataStorage.Kibibits.toMegabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabytes to Kibibits', () => {
    expect(DataStorage.Megabytes.toKibibits(6.0)).toBeCloseTo(46875.0, 1);
    expect(DataStorage.Megabytes.toKibibits(0.9)).toBeCloseTo(7031.25, 1);
    expect(DataStorage.Megabytes.toKibibits(0.03)).toBeCloseTo(234.375, 1);
});

it('From Megabytes to Mebibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Megabytes.toMebibits(value)
            const convertBack = DataStorage.Mebibits.toMegabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Megabytes to Mebibits', () => {
    expect(DataStorage.Megabytes.toMebibits(0.03)).toBeCloseTo(0.2288818, 1);
    expect(DataStorage.Megabytes.toMebibits(4.5)).toBeCloseTo(34.3323, 1);
    expect(DataStorage.Megabytes.toMebibits(80.1)).toBeCloseTo(611.1145, 1);
});

it('From Terabits to Bits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabits.toBits(value)
            const convertBack = DataStorage.Bits.toTerabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabits to Bits', () => {
    expect(DataStorage.Terabits.toBits(0.0007)).toBeCloseTo(700000000.0, 1);
    expect(DataStorage.Terabits.toBits(1.23e-6)).toBeCloseTo(1230000.0, 1);
    expect(DataStorage.Terabits.toBits(0.00098)).toBeCloseTo(980000000.0, 1);
});

it('From Terabits to Kilobits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabits.toKilobits(value)
            const convertBack = DataStorage.Kilobits.toTerabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabits to Kilobits', () => {
    expect(DataStorage.Terabits.toKilobits(0.001)).toBeCloseTo(1000000.0, 1);
    expect(DataStorage.Terabits.toKilobits(6.1e-6)).toBeCloseTo(6100.0, 1);
    expect(DataStorage.Terabits.toKilobits(0.00009)).toBeCloseTo(90000.0, 1);
});

it('From Terabits to Megabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabits.toMegabits(value)
            const convertBack = DataStorage.Megabits.toTerabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabits to Megabits', () => {
    expect(DataStorage.Terabits.toMegabits(0.09)).toBeCloseTo(90000.0, 1);
    expect(DataStorage.Terabits.toMegabits(3.5e-4)).toBeCloseTo(350.0, 1);
    expect(DataStorage.Terabits.toMegabits(0.0123)).toBeCloseTo(12300.0, 1);
});

it('From Terabits to Gigabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabits.toGigabits(value)
            const convertBack = DataStorage.Gigabits.toTerabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabits to Gigabits', () => {
    expect(DataStorage.Terabits.toGigabits(0.9)).toBeCloseTo(900.0, 1);
    expect(DataStorage.Terabits.toGigabits(1.45)).toBeCloseTo(1450.0, 1);
    expect(DataStorage.Terabits.toGigabits(8.19)).toBeCloseTo(8190.0, 1);
});

it('From Terabits to Kilobytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabits.toKilobytes(value)
            const convertBack = DataStorage.Kilobytes.toTerabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabits to Kilobytes', () => {
    expect(DataStorage.Terabits.toKilobytes(0.0009)).toBeCloseTo(112500.0, 1);
    expect(DataStorage.Terabits.toKilobytes(3.14e-6)).toBeCloseTo(392.5, 1);
    expect(DataStorage.Terabits.toKilobytes(0.001)).toBeCloseTo(125000.0, 1);
});

it('From Terabits to Megabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabits.toMegabytes(value)
            const convertBack = DataStorage.Megabytes.toTerabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabits to Megabytes', () => {
    expect(DataStorage.Terabits.toMegabytes(0.4)).toBeCloseTo(50000.0, 1);
    expect(DataStorage.Terabits.toMegabytes(3.9e-3)).toBeCloseTo(487.5, 1);
    expect(DataStorage.Terabits.toMegabytes(0.007)).toBeCloseTo(875.0, 1);
});

it('From Terabits to Gigabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabits.toGigabytes(value)
            const convertBack = DataStorage.Gigabytes.toTerabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabits to Gigabytes', () => {
    expect(DataStorage.Terabits.toGigabytes(0.009)).toBeCloseTo(1.125, 1);
    expect(DataStorage.Terabits.toGigabytes(0.00123)).toBeCloseTo(0.15375, 1);
    expect(DataStorage.Terabits.toGigabytes(8.1e-3)).toBeCloseTo(1.0125, 1);
});

it('From Terabits to Terabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabits.toTerabytes(value)
            const convertBack = DataStorage.Terabytes.toTerabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabits to Terabytes', () => {
    expect(DataStorage.Terabits.toTerabytes(0.3)).toBeCloseTo(0.0375, 1);
    expect(DataStorage.Terabits.toTerabytes(14.0)).toBeCloseTo(1.75, 1);
    expect(DataStorage.Terabits.toTerabytes(0.8)).toBeCloseTo(0.1, 1);
});

it('From Terabits to Kibibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabits.toKibibits(value)
            const convertBack = DataStorage.Kibibits.toTerabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabits to Kibibits', () => {
    expect(DataStorage.Terabits.toKibibits(0.0009)).toBeCloseTo(878906.25, 1);
    expect(DataStorage.Terabits.toKibibits(6.1e-6)).toBeCloseTo(5957.031, 1);
    expect(DataStorage.Terabits.toKibibits(12e-9)).toBeCloseTo(11.71875, 1);
});

it('From Terabits to Mebibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabits.toMebibits(value)
            const convertBack = DataStorage.Mebibits.toTerabits(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabits to Mebibits', () => {
    expect(DataStorage.Terabits.toMebibits(0.9)).toBeCloseTo(858306.59999, 1);
    expect(DataStorage.Terabits.toMebibits(4.6e-3)).toBeCloseTo(4386.9, 1);
    expect(DataStorage.Terabits.toMebibits(0.00123)).toBeCloseTo(1173.0194092, 1);
});

it('From Terabytes to Bits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabytes.toBits(value)
            const convertBack = DataStorage.Bits.toTerabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabytes to Bits', () => {
    expect(DataStorage.Terabytes.toBits(0.00008)).toBeCloseTo(640000000.0, 1);
    expect(DataStorage.Terabytes.toBits(1.2e-12)).toBeCloseTo(9.6, 1);
    expect(DataStorage.Terabytes.toBits(9.0)).toBeCloseTo(7.2e+13, 1);
});

it('From Terabytes to Kilobits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabytes.toKilobits(value)
            const convertBack = DataStorage.Kilobits.toTerabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabytes to Kilobits', () => {
    expect(DataStorage.Terabytes.toKilobits(0.009)).toBeCloseTo(72000000.0, 1);
    expect(DataStorage.Terabytes.toKilobits(1.4e-6)).toBeCloseTo(11200.0, 1);
    expect(DataStorage.Terabytes.toKilobits(6.1e-5)).toBeCloseTo(488000.0, 1);
});

it('From Terabytes to Megabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabytes.toMegabits(value)
            const convertBack = DataStorage.Megabits.toTerabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabytes to Megabits', () => {
    expect(DataStorage.Terabytes.toMegabits(0.005)).toBeCloseTo(40000.0, 1);
    expect(DataStorage.Terabytes.toMegabits(0.000123)).toBeCloseTo(984.0, 1);
    expect(DataStorage.Terabytes.toMegabits(0.00006)).toBeCloseTo(480.0, 1);
});

it('From Terabytes to Gigabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabytes.toGigabits(value)
            const convertBack = DataStorage.Gigabits.toTerabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabytes to Gigabits', () => {
    expect(DataStorage.Terabytes.toGigabits(0.008)).toBeCloseTo(64.0, 1);
    expect(DataStorage.Terabytes.toGigabits(3e-7)).toBeCloseTo(0.0024, 1);
    expect(DataStorage.Terabytes.toGigabits(0.00023)).toBeCloseTo(1.84, 1);
});

it('From Terabytes to Terabits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabytes.toTerabits(value)
            const convertBack = DataStorage.Terabits.toTerabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabytes to Terabits', () => {
    expect(DataStorage.Terabytes.toTerabits(5.0)).toBeCloseTo(40.0, 1);
    expect(DataStorage.Terabytes.toTerabits(1.23)).toBeCloseTo(9.84, 1);
    expect(DataStorage.Terabytes.toTerabits(800.0)).toBeCloseTo(6400.0, 1);
});

it('From Terabytes to Kilobytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabytes.toKilobytes(value)
            const convertBack = DataStorage.Kilobytes.toTerabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabytes to Kilobytes', () => {
    expect(DataStorage.Terabytes.toKilobytes(0.0009)).toBeCloseTo(900000.0, 1);
    expect(DataStorage.Terabytes.toKilobytes(3.14e-7)).toBeCloseTo(314.0, 1);
    expect(DataStorage.Terabytes.toKilobytes(0.00063)).toBeCloseTo(630000.0, 1);
});

it('From Terabytes to Megabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabytes.toMegabytes(value)
            const convertBack = DataStorage.Megabytes.toTerabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabytes to Megabytes', () => {
    expect(DataStorage.Terabytes.toMegabytes(0.009)).toBeCloseTo(9000.0, 1);
    expect(DataStorage.Terabytes.toMegabytes(0.234)).toBeCloseTo(234000.0, 1);
    expect(DataStorage.Terabytes.toMegabytes(2.0)).toBeCloseTo(2e+6, 1);
});

it('From Terabytes to Gigabytes and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabytes.toGigabytes(value)
            const convertBack = DataStorage.Gigabytes.toTerabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabytes to Gigabytes', () => {
    expect(DataStorage.Terabytes.toGigabytes(2.7)).toBeCloseTo(2700.0, 1);
    expect(DataStorage.Terabytes.toGigabytes(0.9)).toBeCloseTo(900.0, 1);
    expect(DataStorage.Terabytes.toGigabytes(0.0123)).toBeCloseTo(12.3, 1);
});

it('From Terabytes to Kibibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabytes.toKibibits(value)
            const convertBack = DataStorage.Kibibits.toTerabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabytes to Kibibits', () => {
    expect(DataStorage.Terabytes.toKibibits(0.0009)).toBeCloseTo(7031250.0, 1);
    expect(DataStorage.Terabytes.toKibibits(1.23e-5)).toBeCloseTo(96093.75, 1);
    expect(DataStorage.Terabytes.toKibibits(0.0001)).toBeCloseTo(781250.0, 1);
});

it('From Terabytes to Mebibits and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = DataStorage.Terabytes.toMebibits(value)
            const convertBack = DataStorage.Mebibits.toTerabytes(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Terabytes to Mebibits', () => {
    expect(DataStorage.Terabytes.toMebibits(0.01)).toBeCloseTo(76293.95, 1);
    expect(DataStorage.Terabytes.toMebibits(0.008)).toBeCloseTo(61035.156, 1);
    expect(DataStorage.Terabytes.toMebibits(2.0)).toBeCloseTo(15258789.0625, 1);
});

