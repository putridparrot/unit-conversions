// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

import * as fc from 'fast-check';
import { Temperature } from '../src/Temperature';

it('From Celsius to Fahrenheit and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Celsius.toFahrenheit(value)
            const convertBack = Temperature.Fahrenheit.toCelsius(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Celsius to Fahrenheit', () => {
    expect(Temperature.Celsius.toFahrenheit(32.0)).toBeCloseTo(89.6, 1);
    expect(Temperature.Celsius.toFahrenheit(0.9)).toBeCloseTo(33.62, 1);
    expect(Temperature.Celsius.toFahrenheit(0.0)).toBeCloseTo(32.0, 1);
});

it('From Celsius to Kelvin and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Celsius.toKelvin(value)
            const convertBack = Temperature.Kelvin.toCelsius(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Celsius to Kelvin', () => {
    expect(Temperature.Celsius.toKelvin(1.0)).toBeCloseTo(274.15, 1);
    expect(Temperature.Celsius.toKelvin(9.9)).toBeCloseTo(283.05, 1);
    expect(Temperature.Celsius.toKelvin(100.0)).toBeCloseTo(373.15, 1);
});

it('From Celsius to Rankine and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Celsius.toRankine(value)
            const convertBack = Temperature.Rankine.toCelsius(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Celsius to Rankine', () => {
    expect(Temperature.Celsius.toRankine(900.0)).toBeCloseTo(2111.67, 1);
    expect(Temperature.Celsius.toRankine(12.0)).toBeCloseTo(513.27, 1);
    expect(Temperature.Celsius.toRankine(-3.0)).toBeCloseTo(486.27, 1);
});

it('From Celsius to Reaumur and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Celsius.toReaumur(value)
            const convertBack = Temperature.Reaumur.toCelsius(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Celsius to Reaumur', () => {
    expect(Temperature.Celsius.toReaumur(123.0)).toBeCloseTo(98.4, 1);
    expect(Temperature.Celsius.toReaumur(15.67)).toBeCloseTo(12.536, 1);
    expect(Temperature.Celsius.toReaumur(87.0)).toBeCloseTo(69.6, 1);
});

it('From Fahrenheit to Celsius and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Fahrenheit.toCelsius(value)
            const convertBack = Temperature.Celsius.toFahrenheit(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Fahrenheit to Celsius', () => {
    expect(Temperature.Fahrenheit.toCelsius(109.0)).toBeCloseTo(42.7778, 1);
    expect(Temperature.Fahrenheit.toCelsius(56.9)).toBeCloseTo(13.83333, 1);
    expect(Temperature.Fahrenheit.toCelsius(102.0)).toBeCloseTo(38.8889, 1);
});

it('From Fahrenheit to Kelvin and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Fahrenheit.toKelvin(value)
            const convertBack = Temperature.Kelvin.toFahrenheit(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Fahrenheit to Kelvin', () => {
    expect(Temperature.Fahrenheit.toKelvin(34.5)).toBeCloseTo(274.5389, 1);
    expect(Temperature.Fahrenheit.toKelvin(901.0)).toBeCloseTo(755.928, 1);
    expect(Temperature.Fahrenheit.toKelvin(23.9)).toBeCloseTo(268.65, 1);
});

it('From Fahrenheit to Rankine and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Fahrenheit.toRankine(value)
            const convertBack = Temperature.Rankine.toFahrenheit(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Fahrenheit to Rankine', () => {
    expect(Temperature.Fahrenheit.toRankine(123.0)).toBeCloseTo(582.67, 1);
    expect(Temperature.Fahrenheit.toRankine(9.2)).toBeCloseTo(468.87, 1);
    expect(Temperature.Fahrenheit.toRankine(0.2)).toBeCloseTo(459.87, 1);
});

it('From Fahrenheit to Reaumur and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Fahrenheit.toReaumur(value)
            const convertBack = Temperature.Reaumur.toFahrenheit(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Fahrenheit to Reaumur', () => {
    expect(Temperature.Fahrenheit.toReaumur(67.0)).toBeCloseTo(15.555555556, 1);
    expect(Temperature.Fahrenheit.toReaumur(1.6)).toBeCloseTo(-13.511111111, 1);
    expect(Temperature.Fahrenheit.toReaumur(900.0)).toBeCloseTo(385.77777778, 1);
});

it('From Kelvin to Celsius and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Kelvin.toCelsius(value)
            const convertBack = Temperature.Celsius.toKelvin(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kelvin to Celsius', () => {
    expect(Temperature.Kelvin.toCelsius(80.0)).toBeCloseTo(-193.15, 1);
    expect(Temperature.Kelvin.toCelsius(0.9)).toBeCloseTo(-272.25, 1);
    expect(Temperature.Kelvin.toCelsius(305.15)).toBeCloseTo(32.0, 1);
});

it('From Kelvin to Fahrenheit and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Kelvin.toFahrenheit(value)
            const convertBack = Temperature.Fahrenheit.toKelvin(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kelvin to Fahrenheit', () => {
    expect(Temperature.Kelvin.toFahrenheit(123.4)).toBeCloseTo(-237.55, 1);
    expect(Temperature.Kelvin.toFahrenheit(800.0)).toBeCloseTo(980.33, 1);
    expect(Temperature.Kelvin.toFahrenheit(99.999)).toBeCloseTo(-279.6718, 1);
});

it('From Kelvin to Rankine and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Kelvin.toRankine(value)
            const convertBack = Temperature.Rankine.toKelvin(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kelvin to Rankine', () => {
    expect(Temperature.Kelvin.toRankine(156.0)).toBeCloseTo(280.8, 1);
    expect(Temperature.Kelvin.toRankine(8.2)).toBeCloseTo(14.76, 1);
    expect(Temperature.Kelvin.toRankine(0.8)).toBeCloseTo(1.44, 1);
});

it('From Kelvin to Reaumur and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Kelvin.toReaumur(value)
            const convertBack = Temperature.Reaumur.toKelvin(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Kelvin to Reaumur', () => {
    expect(Temperature.Kelvin.toReaumur(900.0)).toBeCloseTo(501.48, 1);
    expect(Temperature.Kelvin.toReaumur(1.3)).toBeCloseTo(-217.48, 1);
    expect(Temperature.Kelvin.toReaumur(60.0)).toBeCloseTo(-170.52, 1);
});

it('From Rankine to Celsius and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Rankine.toCelsius(value)
            const convertBack = Temperature.Celsius.toRankine(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Rankine to Celsius', () => {
    expect(Temperature.Rankine.toCelsius(190.0)).toBeCloseTo(-167.59444444, 1);
    expect(Temperature.Rankine.toCelsius(0.7)).toBeCloseTo(-272.76111111, 1);
    expect(Temperature.Rankine.toCelsius(900.0)).toBeCloseTo(226.85, 1);
});

it('From Rankine to Fahrenheit and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Rankine.toFahrenheit(value)
            const convertBack = Temperature.Fahrenheit.toRankine(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Rankine to Fahrenheit', () => {
    expect(Temperature.Rankine.toFahrenheit(109.0)).toBeCloseTo(-350.67, 1);
    expect(Temperature.Rankine.toFahrenheit(3567.0)).toBeCloseTo(3107.33, 1);
    expect(Temperature.Rankine.toFahrenheit(9.0)).toBeCloseTo(-450.67, 1);
});

it('From Rankine to Kelvin and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Rankine.toKelvin(value)
            const convertBack = Temperature.Kelvin.toRankine(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Rankine to Kelvin', () => {
    expect(Temperature.Rankine.toKelvin(123.0)).toBeCloseTo(68.333333333, 1);
    expect(Temperature.Rankine.toKelvin(0.9)).toBeCloseTo(0.5, 1);
    expect(Temperature.Rankine.toKelvin(23.0)).toBeCloseTo(12.777777778, 1);
});

it('From Rankine to Reaumur and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Rankine.toReaumur(value)
            const convertBack = Temperature.Reaumur.toRankine(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Rankine to Reaumur', () => {
    expect(Temperature.Rankine.toReaumur(900.0)).toBeCloseTo(181.48, 1);
    expect(Temperature.Rankine.toReaumur(34.9)).toBeCloseTo(-203.00888889, 1);
    expect(Temperature.Rankine.toReaumur(0.7)).toBeCloseTo(-218.20888889, 1);
});

it('From Reaumur to Kelvin and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Reaumur.toKelvin(value)
            const convertBack = Temperature.Kelvin.toReaumur(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Reaumur to Kelvin', () => {
    expect(Temperature.Reaumur.toKelvin(128.0)).toBeCloseTo(433.15, 1);
    expect(Temperature.Reaumur.toKelvin(7.4)).toBeCloseTo(282.4, 1);
    expect(Temperature.Reaumur.toKelvin(1.5)).toBeCloseTo(275.025, 1);
});

it('From Reaumur to Celsius and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Reaumur.toCelsius(value)
            const convertBack = Temperature.Celsius.toReaumur(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Reaumur to Celsius', () => {
    expect(Temperature.Reaumur.toCelsius(1.5)).toBeCloseTo(1.875, 1);
    expect(Temperature.Reaumur.toCelsius(23.9)).toBeCloseTo(29.875, 1);
    expect(Temperature.Reaumur.toCelsius(0.3)).toBeCloseTo(0.375, 1);
});

it('From Reaumur to Fahrenheit and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Reaumur.toFahrenheit(value)
            const convertBack = Temperature.Fahrenheit.toReaumur(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Reaumur to Fahrenheit', () => {
    expect(Temperature.Reaumur.toFahrenheit(0.3)).toBeCloseTo(32.675, 1);
    expect(Temperature.Reaumur.toFahrenheit(87.0)).toBeCloseTo(227.75, 1);
    expect(Temperature.Reaumur.toFahrenheit(34.1)).toBeCloseTo(108.725, 1);
});

it('From Reaumur to Rankine and back', () => {
    fc.assert(
        fc.property(fc.float(), value => {
            const convertTo = Temperature.Reaumur.toRankine(value)
            const convertBack = Temperature.Rankine.toReaumur(convertTo)

            expect(convertBack).toBeCloseTo(convertBack, 1);
        })
    )
});

it('Convert known Reaumur to Rankine', () => {
    expect(Temperature.Reaumur.toRankine(34.1)).toBeCloseTo(568.395, 1);
    expect(Temperature.Reaumur.toRankine(10.6)).toBeCloseTo(515.52, 1);
    expect(Temperature.Reaumur.toRankine(1.9)).toBeCloseTo(495.945, 1);
});

